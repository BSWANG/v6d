// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#include "graph.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_graph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EdgePropertyFeature_graph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_graph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IndexFeature_graph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_graph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MirrorPartitionListFeature_graph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_graph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartitionFeature_graph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_graph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PredicateFeature_graph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_graph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PropertyFeature_graph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_graph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Statistics_graph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_graph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_StorageFeature_graph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_graph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopologyFeature_graph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_graph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VertexPropertyFeature_graph_2eproto;
namespace grin {
class TopologyFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopologyFeature> _instance;
} _TopologyFeature_default_instance_;
class MirrorPartitionListFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MirrorPartitionListFeature> _instance;
} _MirrorPartitionListFeature_default_instance_;
class PartitionFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartitionFeature> _instance;
} _PartitionFeature_default_instance_;
class VertexPropertyFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VertexPropertyFeature> _instance;
} _VertexPropertyFeature_default_instance_;
class EdgePropertyFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EdgePropertyFeature> _instance;
} _EdgePropertyFeature_default_instance_;
class PropertyFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropertyFeature> _instance;
} _PropertyFeature_default_instance_;
class IndexFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IndexFeature> _instance;
} _IndexFeature_default_instance_;
class PredicateFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredicateFeature> _instance;
} _PredicateFeature_default_instance_;
class StorageFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StorageFeature> _instance;
  const ::grin::TopologyFeature* topology_feature_;
  const ::grin::PartitionFeature* partition_feature_;
  const ::grin::PropertyFeature* property_feature_;
  const ::grin::IndexFeature* index_feature_;
  const ::grin::PredicateFeature* predicate_feature_;
} _StorageFeature_default_instance_;
class StatisticsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Statistics> _instance;
} _Statistics_default_instance_;
class GraphDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Graph> _instance;
} _Graph_default_instance_;
}  // namespace grin
static void InitDefaultsscc_info_EdgePropertyFeature_graph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grin::_EdgePropertyFeature_default_instance_;
    new (ptr) ::grin::EdgePropertyFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grin::EdgePropertyFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EdgePropertyFeature_graph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EdgePropertyFeature_graph_2eproto}, {}};

static void InitDefaultsscc_info_Graph_graph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grin::_Graph_default_instance_;
    new (ptr) ::grin::Graph();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grin::Graph::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Graph_graph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Graph_graph_2eproto}, {
      &scc_info_StorageFeature_graph_2eproto.base,
      &scc_info_Statistics_graph_2eproto.base,}};

static void InitDefaultsscc_info_IndexFeature_graph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grin::_IndexFeature_default_instance_;
    new (ptr) ::grin::IndexFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grin::IndexFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IndexFeature_graph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IndexFeature_graph_2eproto}, {}};

static void InitDefaultsscc_info_MirrorPartitionListFeature_graph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grin::_MirrorPartitionListFeature_default_instance_;
    new (ptr) ::grin::MirrorPartitionListFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grin::MirrorPartitionListFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MirrorPartitionListFeature_graph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MirrorPartitionListFeature_graph_2eproto}, {}};

static void InitDefaultsscc_info_PartitionFeature_graph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grin::_PartitionFeature_default_instance_;
    new (ptr) ::grin::PartitionFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grin::PartitionFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartitionFeature_graph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PartitionFeature_graph_2eproto}, {
      &scc_info_MirrorPartitionListFeature_graph_2eproto.base,}};

static void InitDefaultsscc_info_PredicateFeature_graph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grin::_PredicateFeature_default_instance_;
    new (ptr) ::grin::PredicateFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grin::PredicateFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PredicateFeature_graph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PredicateFeature_graph_2eproto}, {}};

static void InitDefaultsscc_info_PropertyFeature_graph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grin::_PropertyFeature_default_instance_;
    new (ptr) ::grin::PropertyFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grin::PropertyFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PropertyFeature_graph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PropertyFeature_graph_2eproto}, {
      &scc_info_VertexPropertyFeature_graph_2eproto.base,
      &scc_info_EdgePropertyFeature_graph_2eproto.base,}};

static void InitDefaultsscc_info_Statistics_graph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grin::_Statistics_default_instance_;
    new (ptr) ::grin::Statistics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grin::Statistics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Statistics_graph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Statistics_graph_2eproto}, {}};

static void InitDefaultsscc_info_StorageFeature_graph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grin::_StorageFeature_default_instance_;
    new (ptr) ::grin::StorageFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grin::StorageFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_StorageFeature_graph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_StorageFeature_graph_2eproto}, {
      &scc_info_TopologyFeature_graph_2eproto.base,
      &scc_info_PartitionFeature_graph_2eproto.base,
      &scc_info_PropertyFeature_graph_2eproto.base,
      &scc_info_IndexFeature_graph_2eproto.base,
      &scc_info_PredicateFeature_graph_2eproto.base,}};

static void InitDefaultsscc_info_TopologyFeature_graph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grin::_TopologyFeature_default_instance_;
    new (ptr) ::grin::TopologyFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grin::TopologyFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopologyFeature_graph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TopologyFeature_graph_2eproto}, {}};

static void InitDefaultsscc_info_VertexPropertyFeature_graph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grin::_VertexPropertyFeature_default_instance_;
    new (ptr) ::grin::VertexPropertyFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grin::VertexPropertyFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VertexPropertyFeature_graph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VertexPropertyFeature_graph_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_graph_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_graph_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_graph_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_graph_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::TopologyFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grin::TopologyFeature, grin_assume_has_directed_graph_),
  PROTOBUF_FIELD_OFFSET(::grin::TopologyFeature, grin_assume_has_undirected_graph_),
  PROTOBUF_FIELD_OFFSET(::grin::TopologyFeature, grin_assume_has_multi_edge_graph_),
  PROTOBUF_FIELD_OFFSET(::grin::TopologyFeature, grin_with_vertex_original_id_),
  PROTOBUF_FIELD_OFFSET(::grin::TopologyFeature, grin_with_vertex_data_),
  PROTOBUF_FIELD_OFFSET(::grin::TopologyFeature, grin_with_edge_data_),
  PROTOBUF_FIELD_OFFSET(::grin::TopologyFeature, vertex_list_retrievals_),
  PROTOBUF_FIELD_OFFSET(::grin::TopologyFeature, edge_list_retrievals_),
  PROTOBUF_FIELD_OFFSET(::grin::TopologyFeature, adjacent_list_retrievals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::MirrorPartitionListFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grin::MirrorPartitionListFeature, grin_trait_master_vertex_mirror_partition_list_),
  PROTOBUF_FIELD_OFFSET(::grin::MirrorPartitionListFeature, grin_trait_mirror_vertex_mirror_partition_list_),
  PROTOBUF_FIELD_OFFSET(::grin::MirrorPartitionListFeature, grin_trait_master_edge_mirror_partition_list_),
  PROTOBUF_FIELD_OFFSET(::grin::MirrorPartitionListFeature, grin_trait_mirror_edge_mirror_partition_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, graph_partition_strategy_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, grin_trait_natural_id_for_partition_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, grin_enable_vertex_ref_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, grin_enable_edge_ref_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, vertex_data_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, edge_data_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, mirror_partition_list_feature_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, grin_trait_select_master_for_vertex_list_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, grin_trait_select_partition_for_vertex_list_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, grin_trait_select_master_for_edge_list_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, grin_trait_select_partition_for_edge_list_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, grin_trait_select_master_neighbor_for_adjacent_list_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, grin_trait_select_neighbor_partition_for_adjacent_list_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, grin_trait_fast_vertex_ref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::VertexPropertyFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grin::VertexPropertyFeature, grin_with_vertex_property_),
  PROTOBUF_FIELD_OFFSET(::grin::VertexPropertyFeature, grin_with_vertex_property_name_),
  PROTOBUF_FIELD_OFFSET(::grin::VertexPropertyFeature, grin_with_vertex_type_name_),
  PROTOBUF_FIELD_OFFSET(::grin::VertexPropertyFeature, grin_enable_vertex_property_table_),
  PROTOBUF_FIELD_OFFSET(::grin::VertexPropertyFeature, grin_enable_vertex_primary_keys_),
  PROTOBUF_FIELD_OFFSET(::grin::VertexPropertyFeature, grin_trait_natural_id_for_vertex_type_),
  PROTOBUF_FIELD_OFFSET(::grin::VertexPropertyFeature, grin_trait_natural_id_for_vertex_property_),
  PROTOBUF_FIELD_OFFSET(::grin::VertexPropertyFeature, grin_assume_by_type_vertex_original_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::EdgePropertyFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grin::EdgePropertyFeature, grin_with_edge_property_),
  PROTOBUF_FIELD_OFFSET(::grin::EdgePropertyFeature, grin_with_edge_property_name_),
  PROTOBUF_FIELD_OFFSET(::grin::EdgePropertyFeature, grin_with_edge_type_name_),
  PROTOBUF_FIELD_OFFSET(::grin::EdgePropertyFeature, grin_enable_edge_property_table_),
  PROTOBUF_FIELD_OFFSET(::grin::EdgePropertyFeature, grin_enable_edge_primary_keys_),
  PROTOBUF_FIELD_OFFSET(::grin::EdgePropertyFeature, grin_trait_natural_id_for_edge_type_),
  PROTOBUF_FIELD_OFFSET(::grin::EdgePropertyFeature, grin_trait_natural_id_for_edge_property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::PropertyFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grin::PropertyFeature, grin_enable_row_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyFeature, vertex_property_feature_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyFeature, edge_property_feature_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyFeature, vertex_property_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyFeature, edge_property_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyFeature, grin_assume_column_store_for_vertex_property_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyFeature, grin_assume_column_store_for_edge_property_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyFeature, grin_trait_select_type_for_vertex_list_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyFeature, grin_trait_select_type_for_edge_list_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyFeature, grin_trait_select_neighbor_type_for_adjacent_list_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyFeature, grin_trait_select_edge_type_for_adjacent_list_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyFeature, grin_trait_specific_vev_relation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::IndexFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grin::IndexFeature, grin_with_vertex_label_),
  PROTOBUF_FIELD_OFFSET(::grin::IndexFeature, grin_with_edge_label_),
  PROTOBUF_FIELD_OFFSET(::grin::IndexFeature, grin_assume_all_vertex_list_sorted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::PredicateFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::StorageFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::grin::StorageFeature, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::grin::StorageFeatureDefaultTypeInternal, topology_feature_),
  offsetof(::grin::StorageFeatureDefaultTypeInternal, partition_feature_),
  offsetof(::grin::StorageFeatureDefaultTypeInternal, property_feature_),
  offsetof(::grin::StorageFeatureDefaultTypeInternal, index_feature_),
  offsetof(::grin::StorageFeatureDefaultTypeInternal, predicate_feature_),
  PROTOBUF_FIELD_OFFSET(::grin::StorageFeature, specific_feature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::Statistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grin::Statistics, vertex_count_),
  PROTOBUF_FIELD_OFFSET(::grin::Statistics, edge_count_),
  PROTOBUF_FIELD_OFFSET(::grin::Statistics, partition_count_),
  PROTOBUF_FIELD_OFFSET(::grin::Statistics, vertex_type_count_),
  PROTOBUF_FIELD_OFFSET(::grin::Statistics, edge_type_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::Graph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grin::Graph, uri_),
  PROTOBUF_FIELD_OFFSET(::grin::Graph, grin_version_),
  PROTOBUF_FIELD_OFFSET(::grin::Graph, features_),
  PROTOBUF_FIELD_OFFSET(::grin::Graph, statistics_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::grin::TopologyFeature)},
  { 14, -1, sizeof(::grin::MirrorPartitionListFeature)},
  { 23, -1, sizeof(::grin::PartitionFeature)},
  { 42, -1, sizeof(::grin::VertexPropertyFeature)},
  { 55, -1, sizeof(::grin::EdgePropertyFeature)},
  { 67, -1, sizeof(::grin::PropertyFeature)},
  { 84, -1, sizeof(::grin::IndexFeature)},
  { 92, -1, sizeof(::grin::PredicateFeature)},
  { 97, -1, sizeof(::grin::StorageFeature)},
  { 108, -1, sizeof(::grin::Statistics)},
  { 118, -1, sizeof(::grin::Graph)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grin::_TopologyFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grin::_MirrorPartitionListFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grin::_PartitionFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grin::_VertexPropertyFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grin::_EdgePropertyFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grin::_PropertyFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grin::_IndexFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grin::_PredicateFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grin::_StorageFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grin::_Statistics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grin::_Graph_default_instance_),
};

const char descriptor_table_protodef_graph_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013graph.proto\022\004grin\"\216\003\n\017TopologyFeature\022"
  "&\n\036grin_assume_has_directed_graph\030\001 \001(\010\022"
  "(\n grin_assume_has_undirected_graph\030\002 \001("
  "\010\022(\n grin_assume_has_multi_edge_graph\030\003 "
  "\001(\010\022$\n\034grin_with_vertex_original_id\030\004 \001("
  "\010\022\035\n\025grin_with_vertex_data\030\005 \001(\010\022\033\n\023grin"
  "_with_edge_data\030\006 \001(\010\0223\n\026vertex_list_ret"
  "rievals\030\007 \003(\0162\023.grin.ListRetrieval\0221\n\024ed"
  "ge_list_retrievals\030\010 \003(\0162\023.grin.ListRetr"
  "ieval\0225\n\030adjacent_list_retrievals\030\t \003(\0162"
  "\023.grin.ListRetrieval\"\370\001\n\032MirrorPartition"
  "ListFeature\0226\n.grin_trait_master_vertex_"
  "mirror_partition_list\030\001 \001(\010\0226\n.grin_trai"
  "t_mirror_vertex_mirror_partition_list\030\002 "
  "\001(\010\0224\n,grin_trait_master_edge_mirror_par"
  "tition_list\030\003 \001(\010\0224\n,grin_trait_mirror_e"
  "dge_mirror_partition_list\030\004 \001(\010\"\343\005\n\020Part"
  "itionFeature\022>\n\030graph_partition_strategy"
  "\030\001 \001(\0162\034.grin.GraphPartitionStrategy\022+\n#"
  "grin_trait_natural_id_for_partition\030\002 \001("
  "\010\022\036\n\026grin_enable_vertex_ref\030\003 \001(\010\022\034\n\024gri"
  "n_enable_edge_ref\030\004 \001(\010\0228\n\013vertex_data\030\005"
  " \001(\0162#.grin.PropertyDataPartitionStrateg"
  "y\0226\n\tedge_data\030\006 \001(\0162#.grin.PropertyData"
  "PartitionStrategy\022G\n\035mirror_partition_li"
  "st_feature\030\007 \001(\0132 .grin.MirrorPartitionL"
  "istFeature\0220\n(grin_trait_select_master_f"
  "or_vertex_list\030\010 \001(\010\0223\n+grin_trait_selec"
  "t_partition_for_vertex_list\030\t \001(\010\022.\n&gri"
  "n_trait_select_master_for_edge_list\030\n \001("
  "\010\0221\n)grin_trait_select_partition_for_edg"
  "e_list\030\013 \001(\010\022;\n3grin_trait_select_master"
  "_neighbor_for_adjacent_list\030\014 \001(\010\022>\n6gri"
  "n_trait_select_neighbor_partition_for_ad"
  "jacent_list\030\r \001(\010\022\"\n\032grin_trait_fast_ver"
  "tex_ref\030\016 \001(\010\"\354\002\n\025VertexPropertyFeature\022"
  "!\n\031grin_with_vertex_property\030\001 \001(\010\022&\n\036gr"
  "in_with_vertex_property_name\030\002 \001(\010\022\"\n\032gr"
  "in_with_vertex_type_name\030\003 \001(\010\022)\n!grin_e"
  "nable_vertex_property_table\030\004 \001(\010\022\'\n\037gri"
  "n_enable_vertex_primary_keys\030\005 \001(\010\022-\n%gr"
  "in_trait_natural_id_for_vertex_type\030\006 \001("
  "\010\0221\n)grin_trait_natural_id_for_vertex_pr"
  "operty\030\007 \001(\010\022.\n&grin_assume_by_type_vert"
  "ex_original_id\030\010 \001(\010\"\254\002\n\023EdgePropertyFea"
  "ture\022\037\n\027grin_with_edge_property\030\001 \001(\010\022$\n"
  "\034grin_with_edge_property_name\030\002 \001(\010\022 \n\030g"
  "rin_with_edge_type_name\030\003 \001(\010\022\'\n\037grin_en"
  "able_edge_property_table\030\004 \001(\010\022%\n\035grin_e"
  "nable_edge_primary_keys\030\005 \001(\010\022+\n#grin_tr"
  "ait_natural_id_for_edge_type\030\006 \001(\010\022/\n\'gr"
  "in_trait_natural_id_for_edge_property\030\007 "
  "\001(\010\"\200\005\n\017PropertyFeature\022\027\n\017grin_enable_r"
  "ow\030\001 \001(\010\022<\n\027vertex_property_feature\030\002 \001("
  "\0132\033.grin.VertexPropertyFeature\0228\n\025edge_p"
  "roperty_feature\030\003 \001(\0132\031.grin.EdgePropert"
  "yFeature\022<\n\017vertex_property\030\004 \001(\0162#.grin"
  ".PropertyDataPartitionStrategy\022:\n\redge_p"
  "roperty\030\005 \001(\0162#.grin.PropertyDataPartiti"
  "onStrategy\0224\n,grin_assume_column_store_f"
  "or_vertex_property\030\006 \001(\010\0222\n*grin_assume_"
  "column_store_for_edge_property\030\007 \001(\010\022.\n&"
  "grin_trait_select_type_for_vertex_list\030\010"
  " \001(\010\022,\n$grin_trait_select_type_for_edge_"
  "list\030\t \001(\010\0229\n1grin_trait_select_neighbor"
  "_type_for_adjacent_list\030\n \001(\010\0225\n-grin_tr"
  "ait_select_edge_type_for_adjacent_list\030\013"
  " \001(\010\022(\n grin_trait_specific_vev_relation"
  "\030\014 \001(\010\"x\n\014IndexFeature\022\036\n\026grin_with_vert"
  "ex_label\030\001 \001(\010\022\034\n\024grin_with_edge_label\030\002"
  " \001(\010\022*\n\"grin_assume_all_vertex_list_sort"
  "ed\030\003 \001(\010\"\022\n\020PredicateFeature\"\241\002\n\016Storage"
  "Feature\0221\n\020topology_feature\030\001 \001(\0132\025.grin"
  ".TopologyFeatureH\000\0223\n\021partition_feature\030"
  "\002 \001(\0132\026.grin.PartitionFeatureH\000\0221\n\020prope"
  "rty_feature\030\003 \001(\0132\025.grin.PropertyFeature"
  "H\000\022+\n\rindex_feature\030\004 \001(\0132\022.grin.IndexFe"
  "atureH\000\0223\n\021predicate_feature\030\005 \001(\0132\026.gri"
  "n.PredicateFeatureH\000B\022\n\020specific_feature"
  "\"\203\001\n\nStatistics\022\024\n\014vertex_count\030\001 \001(\005\022\022\n"
  "\nedge_count\030\002 \001(\005\022\027\n\017partition_count\030\003 \001"
  "(\005\022\031\n\021vertex_type_count\030\004 \001(\005\022\027\n\017edge_ty"
  "pe_count\030\005 \001(\005\"x\n\005Graph\022\013\n\003uri\030\001 \001(\t\022\024\n\014"
  "grin_version\030\002 \001(\t\022&\n\010features\030\003 \003(\0132\024.g"
  "rin.StorageFeature\022$\n\nstatistics\030\004 \001(\0132\020"
  ".grin.Statistics*>\n\rListRetrieval\022\t\n\005LR_"
  "NA\020\000\022\021\n\rLR_ARRAY_LIKE\020\001\022\017\n\013LR_ITERATOR\020\002"
  "*u\n\026GraphPartitionStrategy\022\n\n\006GPS_NA\020\000\022\025"
  "\n\021GPS_ALL_REPLICATE\020\001\022\020\n\014GPS_EDGE_CUT\020\002\022"
  "\022\n\016GPS_VERTEX_CUT\020\003\022\022\n\016GPS_HYBRID_CUT\020\004*"
  "\202\001\n\035PropertyDataPartitionStrategy\022\013\n\007PDP"
  "S_NA\020\000\022\024\n\020PDPS_MASTER_ONLY\020\001\022 \n\034PDPS_REP"
  "LICATE_MASTER_MIRROR\020\002\022\034\n\030PDPS_SPLIT_MAS"
  "TER_MIRROR\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_graph_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_graph_2eproto_sccs[11] = {
  &scc_info_EdgePropertyFeature_graph_2eproto.base,
  &scc_info_Graph_graph_2eproto.base,
  &scc_info_IndexFeature_graph_2eproto.base,
  &scc_info_MirrorPartitionListFeature_graph_2eproto.base,
  &scc_info_PartitionFeature_graph_2eproto.base,
  &scc_info_PredicateFeature_graph_2eproto.base,
  &scc_info_PropertyFeature_graph_2eproto.base,
  &scc_info_Statistics_graph_2eproto.base,
  &scc_info_StorageFeature_graph_2eproto.base,
  &scc_info_TopologyFeature_graph_2eproto.base,
  &scc_info_VertexPropertyFeature_graph_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_graph_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_graph_2eproto = {
  false, false, descriptor_table_protodef_graph_2eproto, "graph.proto", 3740,
  &descriptor_table_graph_2eproto_once, descriptor_table_graph_2eproto_sccs, descriptor_table_graph_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_graph_2eproto::offsets,
  file_level_metadata_graph_2eproto, 11, file_level_enum_descriptors_graph_2eproto, file_level_service_descriptors_graph_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_graph_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_graph_2eproto)), true);
namespace grin {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ListRetrieval_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_graph_2eproto);
  return file_level_enum_descriptors_graph_2eproto[0];
}
bool ListRetrieval_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GraphPartitionStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_graph_2eproto);
  return file_level_enum_descriptors_graph_2eproto[1];
}
bool GraphPartitionStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PropertyDataPartitionStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_graph_2eproto);
  return file_level_enum_descriptors_graph_2eproto[2];
}
bool PropertyDataPartitionStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TopologyFeature::InitAsDefaultInstance() {
}
class TopologyFeature::_Internal {
 public:
};

TopologyFeature::TopologyFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vertex_list_retrievals_(arena),
  edge_list_retrievals_(arena),
  adjacent_list_retrievals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grin.TopologyFeature)
}
TopologyFeature::TopologyFeature(const TopologyFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vertex_list_retrievals_(from.vertex_list_retrievals_),
      edge_list_retrievals_(from.edge_list_retrievals_),
      adjacent_list_retrievals_(from.adjacent_list_retrievals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&grin_assume_has_directed_graph_, &from.grin_assume_has_directed_graph_,
    static_cast<size_t>(reinterpret_cast<char*>(&grin_with_edge_data_) -
    reinterpret_cast<char*>(&grin_assume_has_directed_graph_)) + sizeof(grin_with_edge_data_));
  // @@protoc_insertion_point(copy_constructor:grin.TopologyFeature)
}

void TopologyFeature::SharedCtor() {
  ::memset(&grin_assume_has_directed_graph_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grin_with_edge_data_) -
      reinterpret_cast<char*>(&grin_assume_has_directed_graph_)) + sizeof(grin_with_edge_data_));
}

TopologyFeature::~TopologyFeature() {
  // @@protoc_insertion_point(destructor:grin.TopologyFeature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TopologyFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TopologyFeature::ArenaDtor(void* object) {
  TopologyFeature* _this = reinterpret_cast< TopologyFeature* >(object);
  (void)_this;
}
void TopologyFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TopologyFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopologyFeature& TopologyFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopologyFeature_graph_2eproto.base);
  return *internal_default_instance();
}


void TopologyFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.TopologyFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertex_list_retrievals_.Clear();
  edge_list_retrievals_.Clear();
  adjacent_list_retrievals_.Clear();
  ::memset(&grin_assume_has_directed_graph_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grin_with_edge_data_) -
      reinterpret_cast<char*>(&grin_assume_has_directed_graph_)) + sizeof(grin_with_edge_data_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopologyFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool grin_assume_has_directed_graph = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          grin_assume_has_directed_graph_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_assume_has_undirected_graph = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          grin_assume_has_undirected_graph_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_assume_has_multi_edge_graph = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          grin_assume_has_multi_edge_graph_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_with_vertex_original_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          grin_with_vertex_original_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_with_vertex_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          grin_with_vertex_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_with_edge_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          grin_with_edge_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .grin.ListRetrieval vertex_list_retrievals = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_vertex_list_retrievals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_vertex_list_retrievals(static_cast<::grin::ListRetrieval>(val));
        } else goto handle_unusual;
        continue;
      // repeated .grin.ListRetrieval edge_list_retrievals = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_edge_list_retrievals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_edge_list_retrievals(static_cast<::grin::ListRetrieval>(val));
        } else goto handle_unusual;
        continue;
      // repeated .grin.ListRetrieval adjacent_list_retrievals = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_adjacent_list_retrievals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_adjacent_list_retrievals(static_cast<::grin::ListRetrieval>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopologyFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.TopologyFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool grin_assume_has_directed_graph = 1;
  if (this->grin_assume_has_directed_graph() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_grin_assume_has_directed_graph(), target);
  }

  // bool grin_assume_has_undirected_graph = 2;
  if (this->grin_assume_has_undirected_graph() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_grin_assume_has_undirected_graph(), target);
  }

  // bool grin_assume_has_multi_edge_graph = 3;
  if (this->grin_assume_has_multi_edge_graph() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_grin_assume_has_multi_edge_graph(), target);
  }

  // bool grin_with_vertex_original_id = 4;
  if (this->grin_with_vertex_original_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_grin_with_vertex_original_id(), target);
  }

  // bool grin_with_vertex_data = 5;
  if (this->grin_with_vertex_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_grin_with_vertex_data(), target);
  }

  // bool grin_with_edge_data = 6;
  if (this->grin_with_edge_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_grin_with_edge_data(), target);
  }

  // repeated .grin.ListRetrieval vertex_list_retrievals = 7;
  {
    int byte_size = _vertex_list_retrievals_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          7, vertex_list_retrievals_, byte_size, target);
    }
  }

  // repeated .grin.ListRetrieval edge_list_retrievals = 8;
  {
    int byte_size = _edge_list_retrievals_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          8, edge_list_retrievals_, byte_size, target);
    }
  }

  // repeated .grin.ListRetrieval adjacent_list_retrievals = 9;
  {
    int byte_size = _adjacent_list_retrievals_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          9, adjacent_list_retrievals_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.TopologyFeature)
  return target;
}

size_t TopologyFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.TopologyFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grin.ListRetrieval vertex_list_retrievals = 7;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_vertex_list_retrievals_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_vertex_list_retrievals(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vertex_list_retrievals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .grin.ListRetrieval edge_list_retrievals = 8;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_edge_list_retrievals_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_edge_list_retrievals(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _edge_list_retrievals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .grin.ListRetrieval adjacent_list_retrievals = 9;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_adjacent_list_retrievals_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_adjacent_list_retrievals(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _adjacent_list_retrievals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool grin_assume_has_directed_graph = 1;
  if (this->grin_assume_has_directed_graph() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_assume_has_undirected_graph = 2;
  if (this->grin_assume_has_undirected_graph() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_assume_has_multi_edge_graph = 3;
  if (this->grin_assume_has_multi_edge_graph() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_with_vertex_original_id = 4;
  if (this->grin_with_vertex_original_id() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_with_vertex_data = 5;
  if (this->grin_with_vertex_data() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_with_edge_data = 6;
  if (this->grin_with_edge_data() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopologyFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grin.TopologyFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const TopologyFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopologyFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grin.TopologyFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grin.TopologyFeature)
    MergeFrom(*source);
  }
}

void TopologyFeature::MergeFrom(const TopologyFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grin.TopologyFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertex_list_retrievals_.MergeFrom(from.vertex_list_retrievals_);
  edge_list_retrievals_.MergeFrom(from.edge_list_retrievals_);
  adjacent_list_retrievals_.MergeFrom(from.adjacent_list_retrievals_);
  if (from.grin_assume_has_directed_graph() != 0) {
    _internal_set_grin_assume_has_directed_graph(from._internal_grin_assume_has_directed_graph());
  }
  if (from.grin_assume_has_undirected_graph() != 0) {
    _internal_set_grin_assume_has_undirected_graph(from._internal_grin_assume_has_undirected_graph());
  }
  if (from.grin_assume_has_multi_edge_graph() != 0) {
    _internal_set_grin_assume_has_multi_edge_graph(from._internal_grin_assume_has_multi_edge_graph());
  }
  if (from.grin_with_vertex_original_id() != 0) {
    _internal_set_grin_with_vertex_original_id(from._internal_grin_with_vertex_original_id());
  }
  if (from.grin_with_vertex_data() != 0) {
    _internal_set_grin_with_vertex_data(from._internal_grin_with_vertex_data());
  }
  if (from.grin_with_edge_data() != 0) {
    _internal_set_grin_with_edge_data(from._internal_grin_with_edge_data());
  }
}

void TopologyFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grin.TopologyFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopologyFeature::CopyFrom(const TopologyFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.TopologyFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopologyFeature::IsInitialized() const {
  return true;
}

void TopologyFeature::InternalSwap(TopologyFeature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vertex_list_retrievals_.InternalSwap(&other->vertex_list_retrievals_);
  edge_list_retrievals_.InternalSwap(&other->edge_list_retrievals_);
  adjacent_list_retrievals_.InternalSwap(&other->adjacent_list_retrievals_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TopologyFeature, grin_with_edge_data_)
      + sizeof(TopologyFeature::grin_with_edge_data_)
      - PROTOBUF_FIELD_OFFSET(TopologyFeature, grin_assume_has_directed_graph_)>(
          reinterpret_cast<char*>(&grin_assume_has_directed_graph_),
          reinterpret_cast<char*>(&other->grin_assume_has_directed_graph_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TopologyFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MirrorPartitionListFeature::InitAsDefaultInstance() {
}
class MirrorPartitionListFeature::_Internal {
 public:
};

MirrorPartitionListFeature::MirrorPartitionListFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grin.MirrorPartitionListFeature)
}
MirrorPartitionListFeature::MirrorPartitionListFeature(const MirrorPartitionListFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&grin_trait_master_vertex_mirror_partition_list_, &from.grin_trait_master_vertex_mirror_partition_list_,
    static_cast<size_t>(reinterpret_cast<char*>(&grin_trait_mirror_edge_mirror_partition_list_) -
    reinterpret_cast<char*>(&grin_trait_master_vertex_mirror_partition_list_)) + sizeof(grin_trait_mirror_edge_mirror_partition_list_));
  // @@protoc_insertion_point(copy_constructor:grin.MirrorPartitionListFeature)
}

void MirrorPartitionListFeature::SharedCtor() {
  ::memset(&grin_trait_master_vertex_mirror_partition_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grin_trait_mirror_edge_mirror_partition_list_) -
      reinterpret_cast<char*>(&grin_trait_master_vertex_mirror_partition_list_)) + sizeof(grin_trait_mirror_edge_mirror_partition_list_));
}

MirrorPartitionListFeature::~MirrorPartitionListFeature() {
  // @@protoc_insertion_point(destructor:grin.MirrorPartitionListFeature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MirrorPartitionListFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MirrorPartitionListFeature::ArenaDtor(void* object) {
  MirrorPartitionListFeature* _this = reinterpret_cast< MirrorPartitionListFeature* >(object);
  (void)_this;
}
void MirrorPartitionListFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MirrorPartitionListFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MirrorPartitionListFeature& MirrorPartitionListFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MirrorPartitionListFeature_graph_2eproto.base);
  return *internal_default_instance();
}


void MirrorPartitionListFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.MirrorPartitionListFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&grin_trait_master_vertex_mirror_partition_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grin_trait_mirror_edge_mirror_partition_list_) -
      reinterpret_cast<char*>(&grin_trait_master_vertex_mirror_partition_list_)) + sizeof(grin_trait_mirror_edge_mirror_partition_list_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MirrorPartitionListFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool grin_trait_master_vertex_mirror_partition_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          grin_trait_master_vertex_mirror_partition_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_trait_mirror_vertex_mirror_partition_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          grin_trait_mirror_vertex_mirror_partition_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_trait_master_edge_mirror_partition_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          grin_trait_master_edge_mirror_partition_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_trait_mirror_edge_mirror_partition_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          grin_trait_mirror_edge_mirror_partition_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MirrorPartitionListFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.MirrorPartitionListFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool grin_trait_master_vertex_mirror_partition_list = 1;
  if (this->grin_trait_master_vertex_mirror_partition_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_grin_trait_master_vertex_mirror_partition_list(), target);
  }

  // bool grin_trait_mirror_vertex_mirror_partition_list = 2;
  if (this->grin_trait_mirror_vertex_mirror_partition_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_grin_trait_mirror_vertex_mirror_partition_list(), target);
  }

  // bool grin_trait_master_edge_mirror_partition_list = 3;
  if (this->grin_trait_master_edge_mirror_partition_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_grin_trait_master_edge_mirror_partition_list(), target);
  }

  // bool grin_trait_mirror_edge_mirror_partition_list = 4;
  if (this->grin_trait_mirror_edge_mirror_partition_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_grin_trait_mirror_edge_mirror_partition_list(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.MirrorPartitionListFeature)
  return target;
}

size_t MirrorPartitionListFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.MirrorPartitionListFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool grin_trait_master_vertex_mirror_partition_list = 1;
  if (this->grin_trait_master_vertex_mirror_partition_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_mirror_vertex_mirror_partition_list = 2;
  if (this->grin_trait_mirror_vertex_mirror_partition_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_master_edge_mirror_partition_list = 3;
  if (this->grin_trait_master_edge_mirror_partition_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_mirror_edge_mirror_partition_list = 4;
  if (this->grin_trait_mirror_edge_mirror_partition_list() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MirrorPartitionListFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grin.MirrorPartitionListFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const MirrorPartitionListFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MirrorPartitionListFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grin.MirrorPartitionListFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grin.MirrorPartitionListFeature)
    MergeFrom(*source);
  }
}

void MirrorPartitionListFeature::MergeFrom(const MirrorPartitionListFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grin.MirrorPartitionListFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.grin_trait_master_vertex_mirror_partition_list() != 0) {
    _internal_set_grin_trait_master_vertex_mirror_partition_list(from._internal_grin_trait_master_vertex_mirror_partition_list());
  }
  if (from.grin_trait_mirror_vertex_mirror_partition_list() != 0) {
    _internal_set_grin_trait_mirror_vertex_mirror_partition_list(from._internal_grin_trait_mirror_vertex_mirror_partition_list());
  }
  if (from.grin_trait_master_edge_mirror_partition_list() != 0) {
    _internal_set_grin_trait_master_edge_mirror_partition_list(from._internal_grin_trait_master_edge_mirror_partition_list());
  }
  if (from.grin_trait_mirror_edge_mirror_partition_list() != 0) {
    _internal_set_grin_trait_mirror_edge_mirror_partition_list(from._internal_grin_trait_mirror_edge_mirror_partition_list());
  }
}

void MirrorPartitionListFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grin.MirrorPartitionListFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MirrorPartitionListFeature::CopyFrom(const MirrorPartitionListFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.MirrorPartitionListFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MirrorPartitionListFeature::IsInitialized() const {
  return true;
}

void MirrorPartitionListFeature::InternalSwap(MirrorPartitionListFeature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MirrorPartitionListFeature, grin_trait_mirror_edge_mirror_partition_list_)
      + sizeof(MirrorPartitionListFeature::grin_trait_mirror_edge_mirror_partition_list_)
      - PROTOBUF_FIELD_OFFSET(MirrorPartitionListFeature, grin_trait_master_vertex_mirror_partition_list_)>(
          reinterpret_cast<char*>(&grin_trait_master_vertex_mirror_partition_list_),
          reinterpret_cast<char*>(&other->grin_trait_master_vertex_mirror_partition_list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MirrorPartitionListFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PartitionFeature::InitAsDefaultInstance() {
  ::grin::_PartitionFeature_default_instance_._instance.get_mutable()->mirror_partition_list_feature_ = const_cast< ::grin::MirrorPartitionListFeature*>(
      ::grin::MirrorPartitionListFeature::internal_default_instance());
}
class PartitionFeature::_Internal {
 public:
  static const ::grin::MirrorPartitionListFeature& mirror_partition_list_feature(const PartitionFeature* msg);
};

const ::grin::MirrorPartitionListFeature&
PartitionFeature::_Internal::mirror_partition_list_feature(const PartitionFeature* msg) {
  return *msg->mirror_partition_list_feature_;
}
PartitionFeature::PartitionFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grin.PartitionFeature)
}
PartitionFeature::PartitionFeature(const PartitionFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mirror_partition_list_feature()) {
    mirror_partition_list_feature_ = new ::grin::MirrorPartitionListFeature(*from.mirror_partition_list_feature_);
  } else {
    mirror_partition_list_feature_ = nullptr;
  }
  ::memcpy(&graph_partition_strategy_, &from.graph_partition_strategy_,
    static_cast<size_t>(reinterpret_cast<char*>(&grin_trait_fast_vertex_ref_) -
    reinterpret_cast<char*>(&graph_partition_strategy_)) + sizeof(grin_trait_fast_vertex_ref_));
  // @@protoc_insertion_point(copy_constructor:grin.PartitionFeature)
}

void PartitionFeature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartitionFeature_graph_2eproto.base);
  ::memset(&mirror_partition_list_feature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grin_trait_fast_vertex_ref_) -
      reinterpret_cast<char*>(&mirror_partition_list_feature_)) + sizeof(grin_trait_fast_vertex_ref_));
}

PartitionFeature::~PartitionFeature() {
  // @@protoc_insertion_point(destructor:grin.PartitionFeature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartitionFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mirror_partition_list_feature_;
}

void PartitionFeature::ArenaDtor(void* object) {
  PartitionFeature* _this = reinterpret_cast< PartitionFeature* >(object);
  (void)_this;
}
void PartitionFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartitionFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartitionFeature& PartitionFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartitionFeature_graph_2eproto.base);
  return *internal_default_instance();
}


void PartitionFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.PartitionFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && mirror_partition_list_feature_ != nullptr) {
    delete mirror_partition_list_feature_;
  }
  mirror_partition_list_feature_ = nullptr;
  ::memset(&graph_partition_strategy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grin_trait_fast_vertex_ref_) -
      reinterpret_cast<char*>(&graph_partition_strategy_)) + sizeof(grin_trait_fast_vertex_ref_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartitionFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .grin.GraphPartitionStrategy graph_partition_strategy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_graph_partition_strategy(static_cast<::grin::GraphPartitionStrategy>(val));
        } else goto handle_unusual;
        continue;
      // bool grin_trait_natural_id_for_partition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          grin_trait_natural_id_for_partition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_enable_vertex_ref = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          grin_enable_vertex_ref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_enable_edge_ref = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          grin_enable_edge_ref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grin.PropertyDataPartitionStrategy vertex_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_vertex_data(static_cast<::grin::PropertyDataPartitionStrategy>(val));
        } else goto handle_unusual;
        continue;
      // .grin.PropertyDataPartitionStrategy edge_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_edge_data(static_cast<::grin::PropertyDataPartitionStrategy>(val));
        } else goto handle_unusual;
        continue;
      // .grin.MirrorPartitionListFeature mirror_partition_list_feature = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_mirror_partition_list_feature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_trait_select_master_for_vertex_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          grin_trait_select_master_for_vertex_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_trait_select_partition_for_vertex_list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          grin_trait_select_partition_for_vertex_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_trait_select_master_for_edge_list = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          grin_trait_select_master_for_edge_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_trait_select_partition_for_edge_list = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          grin_trait_select_partition_for_edge_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_trait_select_master_neighbor_for_adjacent_list = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          grin_trait_select_master_neighbor_for_adjacent_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_trait_select_neighbor_partition_for_adjacent_list = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          grin_trait_select_neighbor_partition_for_adjacent_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_trait_fast_vertex_ref = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          grin_trait_fast_vertex_ref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartitionFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.PartitionFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grin.GraphPartitionStrategy graph_partition_strategy = 1;
  if (this->graph_partition_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_graph_partition_strategy(), target);
  }

  // bool grin_trait_natural_id_for_partition = 2;
  if (this->grin_trait_natural_id_for_partition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_grin_trait_natural_id_for_partition(), target);
  }

  // bool grin_enable_vertex_ref = 3;
  if (this->grin_enable_vertex_ref() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_grin_enable_vertex_ref(), target);
  }

  // bool grin_enable_edge_ref = 4;
  if (this->grin_enable_edge_ref() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_grin_enable_edge_ref(), target);
  }

  // .grin.PropertyDataPartitionStrategy vertex_data = 5;
  if (this->vertex_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_vertex_data(), target);
  }

  // .grin.PropertyDataPartitionStrategy edge_data = 6;
  if (this->edge_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_edge_data(), target);
  }

  // .grin.MirrorPartitionListFeature mirror_partition_list_feature = 7;
  if (this->has_mirror_partition_list_feature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::mirror_partition_list_feature(this), target, stream);
  }

  // bool grin_trait_select_master_for_vertex_list = 8;
  if (this->grin_trait_select_master_for_vertex_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_grin_trait_select_master_for_vertex_list(), target);
  }

  // bool grin_trait_select_partition_for_vertex_list = 9;
  if (this->grin_trait_select_partition_for_vertex_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_grin_trait_select_partition_for_vertex_list(), target);
  }

  // bool grin_trait_select_master_for_edge_list = 10;
  if (this->grin_trait_select_master_for_edge_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_grin_trait_select_master_for_edge_list(), target);
  }

  // bool grin_trait_select_partition_for_edge_list = 11;
  if (this->grin_trait_select_partition_for_edge_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_grin_trait_select_partition_for_edge_list(), target);
  }

  // bool grin_trait_select_master_neighbor_for_adjacent_list = 12;
  if (this->grin_trait_select_master_neighbor_for_adjacent_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_grin_trait_select_master_neighbor_for_adjacent_list(), target);
  }

  // bool grin_trait_select_neighbor_partition_for_adjacent_list = 13;
  if (this->grin_trait_select_neighbor_partition_for_adjacent_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_grin_trait_select_neighbor_partition_for_adjacent_list(), target);
  }

  // bool grin_trait_fast_vertex_ref = 14;
  if (this->grin_trait_fast_vertex_ref() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_grin_trait_fast_vertex_ref(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.PartitionFeature)
  return target;
}

size_t PartitionFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.PartitionFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .grin.MirrorPartitionListFeature mirror_partition_list_feature = 7;
  if (this->has_mirror_partition_list_feature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mirror_partition_list_feature_);
  }

  // .grin.GraphPartitionStrategy graph_partition_strategy = 1;
  if (this->graph_partition_strategy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_graph_partition_strategy());
  }

  // bool grin_trait_natural_id_for_partition = 2;
  if (this->grin_trait_natural_id_for_partition() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_enable_vertex_ref = 3;
  if (this->grin_enable_vertex_ref() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_enable_edge_ref = 4;
  if (this->grin_enable_edge_ref() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_select_master_for_vertex_list = 8;
  if (this->grin_trait_select_master_for_vertex_list() != 0) {
    total_size += 1 + 1;
  }

  // .grin.PropertyDataPartitionStrategy vertex_data = 5;
  if (this->vertex_data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vertex_data());
  }

  // .grin.PropertyDataPartitionStrategy edge_data = 6;
  if (this->edge_data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_edge_data());
  }

  // bool grin_trait_select_partition_for_vertex_list = 9;
  if (this->grin_trait_select_partition_for_vertex_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_select_master_for_edge_list = 10;
  if (this->grin_trait_select_master_for_edge_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_select_partition_for_edge_list = 11;
  if (this->grin_trait_select_partition_for_edge_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_select_master_neighbor_for_adjacent_list = 12;
  if (this->grin_trait_select_master_neighbor_for_adjacent_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_select_neighbor_partition_for_adjacent_list = 13;
  if (this->grin_trait_select_neighbor_partition_for_adjacent_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_fast_vertex_ref = 14;
  if (this->grin_trait_fast_vertex_ref() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartitionFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grin.PartitionFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const PartitionFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartitionFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grin.PartitionFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grin.PartitionFeature)
    MergeFrom(*source);
  }
}

void PartitionFeature::MergeFrom(const PartitionFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grin.PartitionFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mirror_partition_list_feature()) {
    _internal_mutable_mirror_partition_list_feature()->::grin::MirrorPartitionListFeature::MergeFrom(from._internal_mirror_partition_list_feature());
  }
  if (from.graph_partition_strategy() != 0) {
    _internal_set_graph_partition_strategy(from._internal_graph_partition_strategy());
  }
  if (from.grin_trait_natural_id_for_partition() != 0) {
    _internal_set_grin_trait_natural_id_for_partition(from._internal_grin_trait_natural_id_for_partition());
  }
  if (from.grin_enable_vertex_ref() != 0) {
    _internal_set_grin_enable_vertex_ref(from._internal_grin_enable_vertex_ref());
  }
  if (from.grin_enable_edge_ref() != 0) {
    _internal_set_grin_enable_edge_ref(from._internal_grin_enable_edge_ref());
  }
  if (from.grin_trait_select_master_for_vertex_list() != 0) {
    _internal_set_grin_trait_select_master_for_vertex_list(from._internal_grin_trait_select_master_for_vertex_list());
  }
  if (from.vertex_data() != 0) {
    _internal_set_vertex_data(from._internal_vertex_data());
  }
  if (from.edge_data() != 0) {
    _internal_set_edge_data(from._internal_edge_data());
  }
  if (from.grin_trait_select_partition_for_vertex_list() != 0) {
    _internal_set_grin_trait_select_partition_for_vertex_list(from._internal_grin_trait_select_partition_for_vertex_list());
  }
  if (from.grin_trait_select_master_for_edge_list() != 0) {
    _internal_set_grin_trait_select_master_for_edge_list(from._internal_grin_trait_select_master_for_edge_list());
  }
  if (from.grin_trait_select_partition_for_edge_list() != 0) {
    _internal_set_grin_trait_select_partition_for_edge_list(from._internal_grin_trait_select_partition_for_edge_list());
  }
  if (from.grin_trait_select_master_neighbor_for_adjacent_list() != 0) {
    _internal_set_grin_trait_select_master_neighbor_for_adjacent_list(from._internal_grin_trait_select_master_neighbor_for_adjacent_list());
  }
  if (from.grin_trait_select_neighbor_partition_for_adjacent_list() != 0) {
    _internal_set_grin_trait_select_neighbor_partition_for_adjacent_list(from._internal_grin_trait_select_neighbor_partition_for_adjacent_list());
  }
  if (from.grin_trait_fast_vertex_ref() != 0) {
    _internal_set_grin_trait_fast_vertex_ref(from._internal_grin_trait_fast_vertex_ref());
  }
}

void PartitionFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grin.PartitionFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartitionFeature::CopyFrom(const PartitionFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.PartitionFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionFeature::IsInitialized() const {
  return true;
}

void PartitionFeature::InternalSwap(PartitionFeature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PartitionFeature, grin_trait_fast_vertex_ref_)
      + sizeof(PartitionFeature::grin_trait_fast_vertex_ref_)
      - PROTOBUF_FIELD_OFFSET(PartitionFeature, mirror_partition_list_feature_)>(
          reinterpret_cast<char*>(&mirror_partition_list_feature_),
          reinterpret_cast<char*>(&other->mirror_partition_list_feature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PartitionFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VertexPropertyFeature::InitAsDefaultInstance() {
}
class VertexPropertyFeature::_Internal {
 public:
};

VertexPropertyFeature::VertexPropertyFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grin.VertexPropertyFeature)
}
VertexPropertyFeature::VertexPropertyFeature(const VertexPropertyFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&grin_with_vertex_property_, &from.grin_with_vertex_property_,
    static_cast<size_t>(reinterpret_cast<char*>(&grin_assume_by_type_vertex_original_id_) -
    reinterpret_cast<char*>(&grin_with_vertex_property_)) + sizeof(grin_assume_by_type_vertex_original_id_));
  // @@protoc_insertion_point(copy_constructor:grin.VertexPropertyFeature)
}

void VertexPropertyFeature::SharedCtor() {
  ::memset(&grin_with_vertex_property_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grin_assume_by_type_vertex_original_id_) -
      reinterpret_cast<char*>(&grin_with_vertex_property_)) + sizeof(grin_assume_by_type_vertex_original_id_));
}

VertexPropertyFeature::~VertexPropertyFeature() {
  // @@protoc_insertion_point(destructor:grin.VertexPropertyFeature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VertexPropertyFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VertexPropertyFeature::ArenaDtor(void* object) {
  VertexPropertyFeature* _this = reinterpret_cast< VertexPropertyFeature* >(object);
  (void)_this;
}
void VertexPropertyFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VertexPropertyFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VertexPropertyFeature& VertexPropertyFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VertexPropertyFeature_graph_2eproto.base);
  return *internal_default_instance();
}


void VertexPropertyFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.VertexPropertyFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&grin_with_vertex_property_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grin_assume_by_type_vertex_original_id_) -
      reinterpret_cast<char*>(&grin_with_vertex_property_)) + sizeof(grin_assume_by_type_vertex_original_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VertexPropertyFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool grin_with_vertex_property = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          grin_with_vertex_property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_with_vertex_property_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          grin_with_vertex_property_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_with_vertex_type_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          grin_with_vertex_type_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_enable_vertex_property_table = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          grin_enable_vertex_property_table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_enable_vertex_primary_keys = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          grin_enable_vertex_primary_keys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_trait_natural_id_for_vertex_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          grin_trait_natural_id_for_vertex_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_trait_natural_id_for_vertex_property = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          grin_trait_natural_id_for_vertex_property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_assume_by_type_vertex_original_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          grin_assume_by_type_vertex_original_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VertexPropertyFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.VertexPropertyFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool grin_with_vertex_property = 1;
  if (this->grin_with_vertex_property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_grin_with_vertex_property(), target);
  }

  // bool grin_with_vertex_property_name = 2;
  if (this->grin_with_vertex_property_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_grin_with_vertex_property_name(), target);
  }

  // bool grin_with_vertex_type_name = 3;
  if (this->grin_with_vertex_type_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_grin_with_vertex_type_name(), target);
  }

  // bool grin_enable_vertex_property_table = 4;
  if (this->grin_enable_vertex_property_table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_grin_enable_vertex_property_table(), target);
  }

  // bool grin_enable_vertex_primary_keys = 5;
  if (this->grin_enable_vertex_primary_keys() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_grin_enable_vertex_primary_keys(), target);
  }

  // bool grin_trait_natural_id_for_vertex_type = 6;
  if (this->grin_trait_natural_id_for_vertex_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_grin_trait_natural_id_for_vertex_type(), target);
  }

  // bool grin_trait_natural_id_for_vertex_property = 7;
  if (this->grin_trait_natural_id_for_vertex_property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_grin_trait_natural_id_for_vertex_property(), target);
  }

  // bool grin_assume_by_type_vertex_original_id = 8;
  if (this->grin_assume_by_type_vertex_original_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_grin_assume_by_type_vertex_original_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.VertexPropertyFeature)
  return target;
}

size_t VertexPropertyFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.VertexPropertyFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool grin_with_vertex_property = 1;
  if (this->grin_with_vertex_property() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_with_vertex_property_name = 2;
  if (this->grin_with_vertex_property_name() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_with_vertex_type_name = 3;
  if (this->grin_with_vertex_type_name() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_enable_vertex_property_table = 4;
  if (this->grin_enable_vertex_property_table() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_enable_vertex_primary_keys = 5;
  if (this->grin_enable_vertex_primary_keys() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_natural_id_for_vertex_type = 6;
  if (this->grin_trait_natural_id_for_vertex_type() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_natural_id_for_vertex_property = 7;
  if (this->grin_trait_natural_id_for_vertex_property() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_assume_by_type_vertex_original_id = 8;
  if (this->grin_assume_by_type_vertex_original_id() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VertexPropertyFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grin.VertexPropertyFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const VertexPropertyFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VertexPropertyFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grin.VertexPropertyFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grin.VertexPropertyFeature)
    MergeFrom(*source);
  }
}

void VertexPropertyFeature::MergeFrom(const VertexPropertyFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grin.VertexPropertyFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.grin_with_vertex_property() != 0) {
    _internal_set_grin_with_vertex_property(from._internal_grin_with_vertex_property());
  }
  if (from.grin_with_vertex_property_name() != 0) {
    _internal_set_grin_with_vertex_property_name(from._internal_grin_with_vertex_property_name());
  }
  if (from.grin_with_vertex_type_name() != 0) {
    _internal_set_grin_with_vertex_type_name(from._internal_grin_with_vertex_type_name());
  }
  if (from.grin_enable_vertex_property_table() != 0) {
    _internal_set_grin_enable_vertex_property_table(from._internal_grin_enable_vertex_property_table());
  }
  if (from.grin_enable_vertex_primary_keys() != 0) {
    _internal_set_grin_enable_vertex_primary_keys(from._internal_grin_enable_vertex_primary_keys());
  }
  if (from.grin_trait_natural_id_for_vertex_type() != 0) {
    _internal_set_grin_trait_natural_id_for_vertex_type(from._internal_grin_trait_natural_id_for_vertex_type());
  }
  if (from.grin_trait_natural_id_for_vertex_property() != 0) {
    _internal_set_grin_trait_natural_id_for_vertex_property(from._internal_grin_trait_natural_id_for_vertex_property());
  }
  if (from.grin_assume_by_type_vertex_original_id() != 0) {
    _internal_set_grin_assume_by_type_vertex_original_id(from._internal_grin_assume_by_type_vertex_original_id());
  }
}

void VertexPropertyFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grin.VertexPropertyFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VertexPropertyFeature::CopyFrom(const VertexPropertyFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.VertexPropertyFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VertexPropertyFeature::IsInitialized() const {
  return true;
}

void VertexPropertyFeature::InternalSwap(VertexPropertyFeature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VertexPropertyFeature, grin_assume_by_type_vertex_original_id_)
      + sizeof(VertexPropertyFeature::grin_assume_by_type_vertex_original_id_)
      - PROTOBUF_FIELD_OFFSET(VertexPropertyFeature, grin_with_vertex_property_)>(
          reinterpret_cast<char*>(&grin_with_vertex_property_),
          reinterpret_cast<char*>(&other->grin_with_vertex_property_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VertexPropertyFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EdgePropertyFeature::InitAsDefaultInstance() {
}
class EdgePropertyFeature::_Internal {
 public:
};

EdgePropertyFeature::EdgePropertyFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grin.EdgePropertyFeature)
}
EdgePropertyFeature::EdgePropertyFeature(const EdgePropertyFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&grin_with_edge_property_, &from.grin_with_edge_property_,
    static_cast<size_t>(reinterpret_cast<char*>(&grin_trait_natural_id_for_edge_property_) -
    reinterpret_cast<char*>(&grin_with_edge_property_)) + sizeof(grin_trait_natural_id_for_edge_property_));
  // @@protoc_insertion_point(copy_constructor:grin.EdgePropertyFeature)
}

void EdgePropertyFeature::SharedCtor() {
  ::memset(&grin_with_edge_property_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grin_trait_natural_id_for_edge_property_) -
      reinterpret_cast<char*>(&grin_with_edge_property_)) + sizeof(grin_trait_natural_id_for_edge_property_));
}

EdgePropertyFeature::~EdgePropertyFeature() {
  // @@protoc_insertion_point(destructor:grin.EdgePropertyFeature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EdgePropertyFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EdgePropertyFeature::ArenaDtor(void* object) {
  EdgePropertyFeature* _this = reinterpret_cast< EdgePropertyFeature* >(object);
  (void)_this;
}
void EdgePropertyFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EdgePropertyFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EdgePropertyFeature& EdgePropertyFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EdgePropertyFeature_graph_2eproto.base);
  return *internal_default_instance();
}


void EdgePropertyFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.EdgePropertyFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&grin_with_edge_property_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grin_trait_natural_id_for_edge_property_) -
      reinterpret_cast<char*>(&grin_with_edge_property_)) + sizeof(grin_trait_natural_id_for_edge_property_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdgePropertyFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool grin_with_edge_property = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          grin_with_edge_property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_with_edge_property_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          grin_with_edge_property_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_with_edge_type_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          grin_with_edge_type_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_enable_edge_property_table = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          grin_enable_edge_property_table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_enable_edge_primary_keys = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          grin_enable_edge_primary_keys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_trait_natural_id_for_edge_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          grin_trait_natural_id_for_edge_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_trait_natural_id_for_edge_property = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          grin_trait_natural_id_for_edge_property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EdgePropertyFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.EdgePropertyFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool grin_with_edge_property = 1;
  if (this->grin_with_edge_property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_grin_with_edge_property(), target);
  }

  // bool grin_with_edge_property_name = 2;
  if (this->grin_with_edge_property_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_grin_with_edge_property_name(), target);
  }

  // bool grin_with_edge_type_name = 3;
  if (this->grin_with_edge_type_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_grin_with_edge_type_name(), target);
  }

  // bool grin_enable_edge_property_table = 4;
  if (this->grin_enable_edge_property_table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_grin_enable_edge_property_table(), target);
  }

  // bool grin_enable_edge_primary_keys = 5;
  if (this->grin_enable_edge_primary_keys() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_grin_enable_edge_primary_keys(), target);
  }

  // bool grin_trait_natural_id_for_edge_type = 6;
  if (this->grin_trait_natural_id_for_edge_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_grin_trait_natural_id_for_edge_type(), target);
  }

  // bool grin_trait_natural_id_for_edge_property = 7;
  if (this->grin_trait_natural_id_for_edge_property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_grin_trait_natural_id_for_edge_property(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.EdgePropertyFeature)
  return target;
}

size_t EdgePropertyFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.EdgePropertyFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool grin_with_edge_property = 1;
  if (this->grin_with_edge_property() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_with_edge_property_name = 2;
  if (this->grin_with_edge_property_name() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_with_edge_type_name = 3;
  if (this->grin_with_edge_type_name() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_enable_edge_property_table = 4;
  if (this->grin_enable_edge_property_table() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_enable_edge_primary_keys = 5;
  if (this->grin_enable_edge_primary_keys() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_natural_id_for_edge_type = 6;
  if (this->grin_trait_natural_id_for_edge_type() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_natural_id_for_edge_property = 7;
  if (this->grin_trait_natural_id_for_edge_property() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EdgePropertyFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grin.EdgePropertyFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const EdgePropertyFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EdgePropertyFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grin.EdgePropertyFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grin.EdgePropertyFeature)
    MergeFrom(*source);
  }
}

void EdgePropertyFeature::MergeFrom(const EdgePropertyFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grin.EdgePropertyFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.grin_with_edge_property() != 0) {
    _internal_set_grin_with_edge_property(from._internal_grin_with_edge_property());
  }
  if (from.grin_with_edge_property_name() != 0) {
    _internal_set_grin_with_edge_property_name(from._internal_grin_with_edge_property_name());
  }
  if (from.grin_with_edge_type_name() != 0) {
    _internal_set_grin_with_edge_type_name(from._internal_grin_with_edge_type_name());
  }
  if (from.grin_enable_edge_property_table() != 0) {
    _internal_set_grin_enable_edge_property_table(from._internal_grin_enable_edge_property_table());
  }
  if (from.grin_enable_edge_primary_keys() != 0) {
    _internal_set_grin_enable_edge_primary_keys(from._internal_grin_enable_edge_primary_keys());
  }
  if (from.grin_trait_natural_id_for_edge_type() != 0) {
    _internal_set_grin_trait_natural_id_for_edge_type(from._internal_grin_trait_natural_id_for_edge_type());
  }
  if (from.grin_trait_natural_id_for_edge_property() != 0) {
    _internal_set_grin_trait_natural_id_for_edge_property(from._internal_grin_trait_natural_id_for_edge_property());
  }
}

void EdgePropertyFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grin.EdgePropertyFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgePropertyFeature::CopyFrom(const EdgePropertyFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.EdgePropertyFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgePropertyFeature::IsInitialized() const {
  return true;
}

void EdgePropertyFeature::InternalSwap(EdgePropertyFeature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EdgePropertyFeature, grin_trait_natural_id_for_edge_property_)
      + sizeof(EdgePropertyFeature::grin_trait_natural_id_for_edge_property_)
      - PROTOBUF_FIELD_OFFSET(EdgePropertyFeature, grin_with_edge_property_)>(
          reinterpret_cast<char*>(&grin_with_edge_property_),
          reinterpret_cast<char*>(&other->grin_with_edge_property_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgePropertyFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PropertyFeature::InitAsDefaultInstance() {
  ::grin::_PropertyFeature_default_instance_._instance.get_mutable()->vertex_property_feature_ = const_cast< ::grin::VertexPropertyFeature*>(
      ::grin::VertexPropertyFeature::internal_default_instance());
  ::grin::_PropertyFeature_default_instance_._instance.get_mutable()->edge_property_feature_ = const_cast< ::grin::EdgePropertyFeature*>(
      ::grin::EdgePropertyFeature::internal_default_instance());
}
class PropertyFeature::_Internal {
 public:
  static const ::grin::VertexPropertyFeature& vertex_property_feature(const PropertyFeature* msg);
  static const ::grin::EdgePropertyFeature& edge_property_feature(const PropertyFeature* msg);
};

const ::grin::VertexPropertyFeature&
PropertyFeature::_Internal::vertex_property_feature(const PropertyFeature* msg) {
  return *msg->vertex_property_feature_;
}
const ::grin::EdgePropertyFeature&
PropertyFeature::_Internal::edge_property_feature(const PropertyFeature* msg) {
  return *msg->edge_property_feature_;
}
PropertyFeature::PropertyFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grin.PropertyFeature)
}
PropertyFeature::PropertyFeature(const PropertyFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vertex_property_feature()) {
    vertex_property_feature_ = new ::grin::VertexPropertyFeature(*from.vertex_property_feature_);
  } else {
    vertex_property_feature_ = nullptr;
  }
  if (from._internal_has_edge_property_feature()) {
    edge_property_feature_ = new ::grin::EdgePropertyFeature(*from.edge_property_feature_);
  } else {
    edge_property_feature_ = nullptr;
  }
  ::memcpy(&vertex_property_, &from.vertex_property_,
    static_cast<size_t>(reinterpret_cast<char*>(&grin_trait_specific_vev_relation_) -
    reinterpret_cast<char*>(&vertex_property_)) + sizeof(grin_trait_specific_vev_relation_));
  // @@protoc_insertion_point(copy_constructor:grin.PropertyFeature)
}

void PropertyFeature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PropertyFeature_graph_2eproto.base);
  ::memset(&vertex_property_feature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grin_trait_specific_vev_relation_) -
      reinterpret_cast<char*>(&vertex_property_feature_)) + sizeof(grin_trait_specific_vev_relation_));
}

PropertyFeature::~PropertyFeature() {
  // @@protoc_insertion_point(destructor:grin.PropertyFeature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PropertyFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vertex_property_feature_;
  if (this != internal_default_instance()) delete edge_property_feature_;
}

void PropertyFeature::ArenaDtor(void* object) {
  PropertyFeature* _this = reinterpret_cast< PropertyFeature* >(object);
  (void)_this;
}
void PropertyFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PropertyFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropertyFeature& PropertyFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropertyFeature_graph_2eproto.base);
  return *internal_default_instance();
}


void PropertyFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.PropertyFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && vertex_property_feature_ != nullptr) {
    delete vertex_property_feature_;
  }
  vertex_property_feature_ = nullptr;
  if (GetArena() == nullptr && edge_property_feature_ != nullptr) {
    delete edge_property_feature_;
  }
  edge_property_feature_ = nullptr;
  ::memset(&vertex_property_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grin_trait_specific_vev_relation_) -
      reinterpret_cast<char*>(&vertex_property_)) + sizeof(grin_trait_specific_vev_relation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertyFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool grin_enable_row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          grin_enable_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grin.VertexPropertyFeature vertex_property_feature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vertex_property_feature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grin.EdgePropertyFeature edge_property_feature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_edge_property_feature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grin.PropertyDataPartitionStrategy vertex_property = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_vertex_property(static_cast<::grin::PropertyDataPartitionStrategy>(val));
        } else goto handle_unusual;
        continue;
      // .grin.PropertyDataPartitionStrategy edge_property = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_edge_property(static_cast<::grin::PropertyDataPartitionStrategy>(val));
        } else goto handle_unusual;
        continue;
      // bool grin_assume_column_store_for_vertex_property = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          grin_assume_column_store_for_vertex_property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_assume_column_store_for_edge_property = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          grin_assume_column_store_for_edge_property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_trait_select_type_for_vertex_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          grin_trait_select_type_for_vertex_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_trait_select_type_for_edge_list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          grin_trait_select_type_for_edge_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_trait_select_neighbor_type_for_adjacent_list = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          grin_trait_select_neighbor_type_for_adjacent_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_trait_select_edge_type_for_adjacent_list = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          grin_trait_select_edge_type_for_adjacent_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_trait_specific_vev_relation = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          grin_trait_specific_vev_relation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PropertyFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.PropertyFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool grin_enable_row = 1;
  if (this->grin_enable_row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_grin_enable_row(), target);
  }

  // .grin.VertexPropertyFeature vertex_property_feature = 2;
  if (this->has_vertex_property_feature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vertex_property_feature(this), target, stream);
  }

  // .grin.EdgePropertyFeature edge_property_feature = 3;
  if (this->has_edge_property_feature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::edge_property_feature(this), target, stream);
  }

  // .grin.PropertyDataPartitionStrategy vertex_property = 4;
  if (this->vertex_property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_vertex_property(), target);
  }

  // .grin.PropertyDataPartitionStrategy edge_property = 5;
  if (this->edge_property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_edge_property(), target);
  }

  // bool grin_assume_column_store_for_vertex_property = 6;
  if (this->grin_assume_column_store_for_vertex_property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_grin_assume_column_store_for_vertex_property(), target);
  }

  // bool grin_assume_column_store_for_edge_property = 7;
  if (this->grin_assume_column_store_for_edge_property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_grin_assume_column_store_for_edge_property(), target);
  }

  // bool grin_trait_select_type_for_vertex_list = 8;
  if (this->grin_trait_select_type_for_vertex_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_grin_trait_select_type_for_vertex_list(), target);
  }

  // bool grin_trait_select_type_for_edge_list = 9;
  if (this->grin_trait_select_type_for_edge_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_grin_trait_select_type_for_edge_list(), target);
  }

  // bool grin_trait_select_neighbor_type_for_adjacent_list = 10;
  if (this->grin_trait_select_neighbor_type_for_adjacent_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_grin_trait_select_neighbor_type_for_adjacent_list(), target);
  }

  // bool grin_trait_select_edge_type_for_adjacent_list = 11;
  if (this->grin_trait_select_edge_type_for_adjacent_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_grin_trait_select_edge_type_for_adjacent_list(), target);
  }

  // bool grin_trait_specific_vev_relation = 12;
  if (this->grin_trait_specific_vev_relation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_grin_trait_specific_vev_relation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.PropertyFeature)
  return target;
}

size_t PropertyFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.PropertyFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .grin.VertexPropertyFeature vertex_property_feature = 2;
  if (this->has_vertex_property_feature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vertex_property_feature_);
  }

  // .grin.EdgePropertyFeature edge_property_feature = 3;
  if (this->has_edge_property_feature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edge_property_feature_);
  }

  // .grin.PropertyDataPartitionStrategy vertex_property = 4;
  if (this->vertex_property() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vertex_property());
  }

  // .grin.PropertyDataPartitionStrategy edge_property = 5;
  if (this->edge_property() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_edge_property());
  }

  // bool grin_enable_row = 1;
  if (this->grin_enable_row() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_assume_column_store_for_vertex_property = 6;
  if (this->grin_assume_column_store_for_vertex_property() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_assume_column_store_for_edge_property = 7;
  if (this->grin_assume_column_store_for_edge_property() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_select_type_for_vertex_list = 8;
  if (this->grin_trait_select_type_for_vertex_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_select_type_for_edge_list = 9;
  if (this->grin_trait_select_type_for_edge_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_select_neighbor_type_for_adjacent_list = 10;
  if (this->grin_trait_select_neighbor_type_for_adjacent_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_select_edge_type_for_adjacent_list = 11;
  if (this->grin_trait_select_edge_type_for_adjacent_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_specific_vev_relation = 12;
  if (this->grin_trait_specific_vev_relation() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grin.PropertyFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropertyFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grin.PropertyFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grin.PropertyFeature)
    MergeFrom(*source);
  }
}

void PropertyFeature::MergeFrom(const PropertyFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grin.PropertyFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vertex_property_feature()) {
    _internal_mutable_vertex_property_feature()->::grin::VertexPropertyFeature::MergeFrom(from._internal_vertex_property_feature());
  }
  if (from.has_edge_property_feature()) {
    _internal_mutable_edge_property_feature()->::grin::EdgePropertyFeature::MergeFrom(from._internal_edge_property_feature());
  }
  if (from.vertex_property() != 0) {
    _internal_set_vertex_property(from._internal_vertex_property());
  }
  if (from.edge_property() != 0) {
    _internal_set_edge_property(from._internal_edge_property());
  }
  if (from.grin_enable_row() != 0) {
    _internal_set_grin_enable_row(from._internal_grin_enable_row());
  }
  if (from.grin_assume_column_store_for_vertex_property() != 0) {
    _internal_set_grin_assume_column_store_for_vertex_property(from._internal_grin_assume_column_store_for_vertex_property());
  }
  if (from.grin_assume_column_store_for_edge_property() != 0) {
    _internal_set_grin_assume_column_store_for_edge_property(from._internal_grin_assume_column_store_for_edge_property());
  }
  if (from.grin_trait_select_type_for_vertex_list() != 0) {
    _internal_set_grin_trait_select_type_for_vertex_list(from._internal_grin_trait_select_type_for_vertex_list());
  }
  if (from.grin_trait_select_type_for_edge_list() != 0) {
    _internal_set_grin_trait_select_type_for_edge_list(from._internal_grin_trait_select_type_for_edge_list());
  }
  if (from.grin_trait_select_neighbor_type_for_adjacent_list() != 0) {
    _internal_set_grin_trait_select_neighbor_type_for_adjacent_list(from._internal_grin_trait_select_neighbor_type_for_adjacent_list());
  }
  if (from.grin_trait_select_edge_type_for_adjacent_list() != 0) {
    _internal_set_grin_trait_select_edge_type_for_adjacent_list(from._internal_grin_trait_select_edge_type_for_adjacent_list());
  }
  if (from.grin_trait_specific_vev_relation() != 0) {
    _internal_set_grin_trait_specific_vev_relation(from._internal_grin_trait_specific_vev_relation());
  }
}

void PropertyFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grin.PropertyFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyFeature::CopyFrom(const PropertyFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.PropertyFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyFeature::IsInitialized() const {
  return true;
}

void PropertyFeature::InternalSwap(PropertyFeature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PropertyFeature, grin_trait_specific_vev_relation_)
      + sizeof(PropertyFeature::grin_trait_specific_vev_relation_)
      - PROTOBUF_FIELD_OFFSET(PropertyFeature, vertex_property_feature_)>(
          reinterpret_cast<char*>(&vertex_property_feature_),
          reinterpret_cast<char*>(&other->vertex_property_feature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IndexFeature::InitAsDefaultInstance() {
}
class IndexFeature::_Internal {
 public:
};

IndexFeature::IndexFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grin.IndexFeature)
}
IndexFeature::IndexFeature(const IndexFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&grin_with_vertex_label_, &from.grin_with_vertex_label_,
    static_cast<size_t>(reinterpret_cast<char*>(&grin_assume_all_vertex_list_sorted_) -
    reinterpret_cast<char*>(&grin_with_vertex_label_)) + sizeof(grin_assume_all_vertex_list_sorted_));
  // @@protoc_insertion_point(copy_constructor:grin.IndexFeature)
}

void IndexFeature::SharedCtor() {
  ::memset(&grin_with_vertex_label_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grin_assume_all_vertex_list_sorted_) -
      reinterpret_cast<char*>(&grin_with_vertex_label_)) + sizeof(grin_assume_all_vertex_list_sorted_));
}

IndexFeature::~IndexFeature() {
  // @@protoc_insertion_point(destructor:grin.IndexFeature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IndexFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IndexFeature::ArenaDtor(void* object) {
  IndexFeature* _this = reinterpret_cast< IndexFeature* >(object);
  (void)_this;
}
void IndexFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IndexFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IndexFeature& IndexFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IndexFeature_graph_2eproto.base);
  return *internal_default_instance();
}


void IndexFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.IndexFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&grin_with_vertex_label_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grin_assume_all_vertex_list_sorted_) -
      reinterpret_cast<char*>(&grin_with_vertex_label_)) + sizeof(grin_assume_all_vertex_list_sorted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool grin_with_vertex_label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          grin_with_vertex_label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_with_edge_label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          grin_with_edge_label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool grin_assume_all_vertex_list_sorted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          grin_assume_all_vertex_list_sorted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IndexFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.IndexFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool grin_with_vertex_label = 1;
  if (this->grin_with_vertex_label() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_grin_with_vertex_label(), target);
  }

  // bool grin_with_edge_label = 2;
  if (this->grin_with_edge_label() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_grin_with_edge_label(), target);
  }

  // bool grin_assume_all_vertex_list_sorted = 3;
  if (this->grin_assume_all_vertex_list_sorted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_grin_assume_all_vertex_list_sorted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.IndexFeature)
  return target;
}

size_t IndexFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.IndexFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool grin_with_vertex_label = 1;
  if (this->grin_with_vertex_label() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_with_edge_label = 2;
  if (this->grin_with_edge_label() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_assume_all_vertex_list_sorted = 3;
  if (this->grin_assume_all_vertex_list_sorted() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grin.IndexFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IndexFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grin.IndexFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grin.IndexFeature)
    MergeFrom(*source);
  }
}

void IndexFeature::MergeFrom(const IndexFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grin.IndexFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.grin_with_vertex_label() != 0) {
    _internal_set_grin_with_vertex_label(from._internal_grin_with_vertex_label());
  }
  if (from.grin_with_edge_label() != 0) {
    _internal_set_grin_with_edge_label(from._internal_grin_with_edge_label());
  }
  if (from.grin_assume_all_vertex_list_sorted() != 0) {
    _internal_set_grin_assume_all_vertex_list_sorted(from._internal_grin_assume_all_vertex_list_sorted());
  }
}

void IndexFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grin.IndexFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexFeature::CopyFrom(const IndexFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.IndexFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexFeature::IsInitialized() const {
  return true;
}

void IndexFeature::InternalSwap(IndexFeature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndexFeature, grin_assume_all_vertex_list_sorted_)
      + sizeof(IndexFeature::grin_assume_all_vertex_list_sorted_)
      - PROTOBUF_FIELD_OFFSET(IndexFeature, grin_with_vertex_label_)>(
          reinterpret_cast<char*>(&grin_with_vertex_label_),
          reinterpret_cast<char*>(&other->grin_with_vertex_label_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PredicateFeature::InitAsDefaultInstance() {
}
class PredicateFeature::_Internal {
 public:
};

PredicateFeature::PredicateFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grin.PredicateFeature)
}
PredicateFeature::PredicateFeature(const PredicateFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:grin.PredicateFeature)
}

void PredicateFeature::SharedCtor() {
}

PredicateFeature::~PredicateFeature() {
  // @@protoc_insertion_point(destructor:grin.PredicateFeature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PredicateFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PredicateFeature::ArenaDtor(void* object) {
  PredicateFeature* _this = reinterpret_cast< PredicateFeature* >(object);
  (void)_this;
}
void PredicateFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PredicateFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredicateFeature& PredicateFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PredicateFeature_graph_2eproto.base);
  return *internal_default_instance();
}


void PredicateFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.PredicateFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PredicateFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PredicateFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.PredicateFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.PredicateFeature)
  return target;
}

size_t PredicateFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.PredicateFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredicateFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grin.PredicateFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const PredicateFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PredicateFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grin.PredicateFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grin.PredicateFeature)
    MergeFrom(*source);
  }
}

void PredicateFeature::MergeFrom(const PredicateFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grin.PredicateFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PredicateFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grin.PredicateFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredicateFeature::CopyFrom(const PredicateFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.PredicateFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredicateFeature::IsInitialized() const {
  return true;
}

void PredicateFeature::InternalSwap(PredicateFeature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredicateFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StorageFeature::InitAsDefaultInstance() {
  ::grin::_StorageFeature_default_instance_.topology_feature_ = const_cast< ::grin::TopologyFeature*>(
      ::grin::TopologyFeature::internal_default_instance());
  ::grin::_StorageFeature_default_instance_.partition_feature_ = const_cast< ::grin::PartitionFeature*>(
      ::grin::PartitionFeature::internal_default_instance());
  ::grin::_StorageFeature_default_instance_.property_feature_ = const_cast< ::grin::PropertyFeature*>(
      ::grin::PropertyFeature::internal_default_instance());
  ::grin::_StorageFeature_default_instance_.index_feature_ = const_cast< ::grin::IndexFeature*>(
      ::grin::IndexFeature::internal_default_instance());
  ::grin::_StorageFeature_default_instance_.predicate_feature_ = const_cast< ::grin::PredicateFeature*>(
      ::grin::PredicateFeature::internal_default_instance());
}
class StorageFeature::_Internal {
 public:
  static const ::grin::TopologyFeature& topology_feature(const StorageFeature* msg);
  static const ::grin::PartitionFeature& partition_feature(const StorageFeature* msg);
  static const ::grin::PropertyFeature& property_feature(const StorageFeature* msg);
  static const ::grin::IndexFeature& index_feature(const StorageFeature* msg);
  static const ::grin::PredicateFeature& predicate_feature(const StorageFeature* msg);
};

const ::grin::TopologyFeature&
StorageFeature::_Internal::topology_feature(const StorageFeature* msg) {
  return *msg->specific_feature_.topology_feature_;
}
const ::grin::PartitionFeature&
StorageFeature::_Internal::partition_feature(const StorageFeature* msg) {
  return *msg->specific_feature_.partition_feature_;
}
const ::grin::PropertyFeature&
StorageFeature::_Internal::property_feature(const StorageFeature* msg) {
  return *msg->specific_feature_.property_feature_;
}
const ::grin::IndexFeature&
StorageFeature::_Internal::index_feature(const StorageFeature* msg) {
  return *msg->specific_feature_.index_feature_;
}
const ::grin::PredicateFeature&
StorageFeature::_Internal::predicate_feature(const StorageFeature* msg) {
  return *msg->specific_feature_.predicate_feature_;
}
void StorageFeature::set_allocated_topology_feature(::grin::TopologyFeature* topology_feature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_specific_feature();
  if (topology_feature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(topology_feature);
    if (message_arena != submessage_arena) {
      topology_feature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topology_feature, submessage_arena);
    }
    set_has_topology_feature();
    specific_feature_.topology_feature_ = topology_feature;
  }
  // @@protoc_insertion_point(field_set_allocated:grin.StorageFeature.topology_feature)
}
void StorageFeature::set_allocated_partition_feature(::grin::PartitionFeature* partition_feature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_specific_feature();
  if (partition_feature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(partition_feature);
    if (message_arena != submessage_arena) {
      partition_feature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partition_feature, submessage_arena);
    }
    set_has_partition_feature();
    specific_feature_.partition_feature_ = partition_feature;
  }
  // @@protoc_insertion_point(field_set_allocated:grin.StorageFeature.partition_feature)
}
void StorageFeature::set_allocated_property_feature(::grin::PropertyFeature* property_feature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_specific_feature();
  if (property_feature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(property_feature);
    if (message_arena != submessage_arena) {
      property_feature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, property_feature, submessage_arena);
    }
    set_has_property_feature();
    specific_feature_.property_feature_ = property_feature;
  }
  // @@protoc_insertion_point(field_set_allocated:grin.StorageFeature.property_feature)
}
void StorageFeature::set_allocated_index_feature(::grin::IndexFeature* index_feature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_specific_feature();
  if (index_feature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(index_feature);
    if (message_arena != submessage_arena) {
      index_feature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, index_feature, submessage_arena);
    }
    set_has_index_feature();
    specific_feature_.index_feature_ = index_feature;
  }
  // @@protoc_insertion_point(field_set_allocated:grin.StorageFeature.index_feature)
}
void StorageFeature::set_allocated_predicate_feature(::grin::PredicateFeature* predicate_feature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_specific_feature();
  if (predicate_feature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(predicate_feature);
    if (message_arena != submessage_arena) {
      predicate_feature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, predicate_feature, submessage_arena);
    }
    set_has_predicate_feature();
    specific_feature_.predicate_feature_ = predicate_feature;
  }
  // @@protoc_insertion_point(field_set_allocated:grin.StorageFeature.predicate_feature)
}
StorageFeature::StorageFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grin.StorageFeature)
}
StorageFeature::StorageFeature(const StorageFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_specific_feature();
  switch (from.specific_feature_case()) {
    case kTopologyFeature: {
      _internal_mutable_topology_feature()->::grin::TopologyFeature::MergeFrom(from._internal_topology_feature());
      break;
    }
    case kPartitionFeature: {
      _internal_mutable_partition_feature()->::grin::PartitionFeature::MergeFrom(from._internal_partition_feature());
      break;
    }
    case kPropertyFeature: {
      _internal_mutable_property_feature()->::grin::PropertyFeature::MergeFrom(from._internal_property_feature());
      break;
    }
    case kIndexFeature: {
      _internal_mutable_index_feature()->::grin::IndexFeature::MergeFrom(from._internal_index_feature());
      break;
    }
    case kPredicateFeature: {
      _internal_mutable_predicate_feature()->::grin::PredicateFeature::MergeFrom(from._internal_predicate_feature());
      break;
    }
    case SPECIFIC_FEATURE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:grin.StorageFeature)
}

void StorageFeature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StorageFeature_graph_2eproto.base);
  clear_has_specific_feature();
}

StorageFeature::~StorageFeature() {
  // @@protoc_insertion_point(destructor:grin.StorageFeature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StorageFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_specific_feature()) {
    clear_specific_feature();
  }
}

void StorageFeature::ArenaDtor(void* object) {
  StorageFeature* _this = reinterpret_cast< StorageFeature* >(object);
  (void)_this;
}
void StorageFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StorageFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StorageFeature& StorageFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StorageFeature_graph_2eproto.base);
  return *internal_default_instance();
}


void StorageFeature::clear_specific_feature() {
// @@protoc_insertion_point(one_of_clear_start:grin.StorageFeature)
  switch (specific_feature_case()) {
    case kTopologyFeature: {
      if (GetArena() == nullptr) {
        delete specific_feature_.topology_feature_;
      }
      break;
    }
    case kPartitionFeature: {
      if (GetArena() == nullptr) {
        delete specific_feature_.partition_feature_;
      }
      break;
    }
    case kPropertyFeature: {
      if (GetArena() == nullptr) {
        delete specific_feature_.property_feature_;
      }
      break;
    }
    case kIndexFeature: {
      if (GetArena() == nullptr) {
        delete specific_feature_.index_feature_;
      }
      break;
    }
    case kPredicateFeature: {
      if (GetArena() == nullptr) {
        delete specific_feature_.predicate_feature_;
      }
      break;
    }
    case SPECIFIC_FEATURE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SPECIFIC_FEATURE_NOT_SET;
}


void StorageFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.StorageFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_specific_feature();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StorageFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .grin.TopologyFeature topology_feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topology_feature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grin.PartitionFeature partition_feature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_partition_feature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grin.PropertyFeature property_feature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_property_feature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grin.IndexFeature index_feature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_index_feature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grin.PredicateFeature predicate_feature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_predicate_feature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StorageFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.StorageFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grin.TopologyFeature topology_feature = 1;
  if (_internal_has_topology_feature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::topology_feature(this), target, stream);
  }

  // .grin.PartitionFeature partition_feature = 2;
  if (_internal_has_partition_feature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::partition_feature(this), target, stream);
  }

  // .grin.PropertyFeature property_feature = 3;
  if (_internal_has_property_feature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::property_feature(this), target, stream);
  }

  // .grin.IndexFeature index_feature = 4;
  if (_internal_has_index_feature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::index_feature(this), target, stream);
  }

  // .grin.PredicateFeature predicate_feature = 5;
  if (_internal_has_predicate_feature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::predicate_feature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.StorageFeature)
  return target;
}

size_t StorageFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.StorageFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (specific_feature_case()) {
    // .grin.TopologyFeature topology_feature = 1;
    case kTopologyFeature: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specific_feature_.topology_feature_);
      break;
    }
    // .grin.PartitionFeature partition_feature = 2;
    case kPartitionFeature: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specific_feature_.partition_feature_);
      break;
    }
    // .grin.PropertyFeature property_feature = 3;
    case kPropertyFeature: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specific_feature_.property_feature_);
      break;
    }
    // .grin.IndexFeature index_feature = 4;
    case kIndexFeature: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specific_feature_.index_feature_);
      break;
    }
    // .grin.PredicateFeature predicate_feature = 5;
    case kPredicateFeature: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specific_feature_.predicate_feature_);
      break;
    }
    case SPECIFIC_FEATURE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StorageFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grin.StorageFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StorageFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grin.StorageFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grin.StorageFeature)
    MergeFrom(*source);
  }
}

void StorageFeature::MergeFrom(const StorageFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grin.StorageFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.specific_feature_case()) {
    case kTopologyFeature: {
      _internal_mutable_topology_feature()->::grin::TopologyFeature::MergeFrom(from._internal_topology_feature());
      break;
    }
    case kPartitionFeature: {
      _internal_mutable_partition_feature()->::grin::PartitionFeature::MergeFrom(from._internal_partition_feature());
      break;
    }
    case kPropertyFeature: {
      _internal_mutable_property_feature()->::grin::PropertyFeature::MergeFrom(from._internal_property_feature());
      break;
    }
    case kIndexFeature: {
      _internal_mutable_index_feature()->::grin::IndexFeature::MergeFrom(from._internal_index_feature());
      break;
    }
    case kPredicateFeature: {
      _internal_mutable_predicate_feature()->::grin::PredicateFeature::MergeFrom(from._internal_predicate_feature());
      break;
    }
    case SPECIFIC_FEATURE_NOT_SET: {
      break;
    }
  }
}

void StorageFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grin.StorageFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageFeature::CopyFrom(const StorageFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.StorageFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageFeature::IsInitialized() const {
  return true;
}

void StorageFeature::InternalSwap(StorageFeature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(specific_feature_, other->specific_feature_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StorageFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Statistics::InitAsDefaultInstance() {
}
class Statistics::_Internal {
 public:
};

Statistics::Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grin.Statistics)
}
Statistics::Statistics(const Statistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&vertex_count_, &from.vertex_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&edge_type_count_) -
    reinterpret_cast<char*>(&vertex_count_)) + sizeof(edge_type_count_));
  // @@protoc_insertion_point(copy_constructor:grin.Statistics)
}

void Statistics::SharedCtor() {
  ::memset(&vertex_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&edge_type_count_) -
      reinterpret_cast<char*>(&vertex_count_)) + sizeof(edge_type_count_));
}

Statistics::~Statistics() {
  // @@protoc_insertion_point(destructor:grin.Statistics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Statistics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Statistics::ArenaDtor(void* object) {
  Statistics* _this = reinterpret_cast< Statistics* >(object);
  (void)_this;
}
void Statistics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Statistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Statistics& Statistics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Statistics_graph_2eproto.base);
  return *internal_default_instance();
}


void Statistics::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.Statistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vertex_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&edge_type_count_) -
      reinterpret_cast<char*>(&vertex_count_)) + sizeof(edge_type_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Statistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 vertex_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vertex_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 edge_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          edge_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 partition_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          partition_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vertex_type_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          vertex_type_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 edge_type_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          edge_type_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Statistics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.Statistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vertex_count = 1;
  if (this->vertex_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vertex_count(), target);
  }

  // int32 edge_count = 2;
  if (this->edge_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_edge_count(), target);
  }

  // int32 partition_count = 3;
  if (this->partition_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_partition_count(), target);
  }

  // int32 vertex_type_count = 4;
  if (this->vertex_type_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_vertex_type_count(), target);
  }

  // int32 edge_type_count = 5;
  if (this->edge_type_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_edge_type_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.Statistics)
  return target;
}

size_t Statistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.Statistics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 vertex_count = 1;
  if (this->vertex_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vertex_count());
  }

  // int32 edge_count = 2;
  if (this->edge_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_edge_count());
  }

  // int32 partition_count = 3;
  if (this->partition_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_partition_count());
  }

  // int32 vertex_type_count = 4;
  if (this->vertex_type_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vertex_type_count());
  }

  // int32 edge_type_count = 5;
  if (this->edge_type_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_edge_type_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Statistics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grin.Statistics)
  GOOGLE_DCHECK_NE(&from, this);
  const Statistics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Statistics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grin.Statistics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grin.Statistics)
    MergeFrom(*source);
  }
}

void Statistics::MergeFrom(const Statistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grin.Statistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vertex_count() != 0) {
    _internal_set_vertex_count(from._internal_vertex_count());
  }
  if (from.edge_count() != 0) {
    _internal_set_edge_count(from._internal_edge_count());
  }
  if (from.partition_count() != 0) {
    _internal_set_partition_count(from._internal_partition_count());
  }
  if (from.vertex_type_count() != 0) {
    _internal_set_vertex_type_count(from._internal_vertex_type_count());
  }
  if (from.edge_type_count() != 0) {
    _internal_set_edge_type_count(from._internal_edge_type_count());
  }
}

void Statistics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grin.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Statistics::CopyFrom(const Statistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statistics::IsInitialized() const {
  return true;
}

void Statistics::InternalSwap(Statistics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Statistics, edge_type_count_)
      + sizeof(Statistics::edge_type_count_)
      - PROTOBUF_FIELD_OFFSET(Statistics, vertex_count_)>(
          reinterpret_cast<char*>(&vertex_count_),
          reinterpret_cast<char*>(&other->vertex_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Statistics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Graph::InitAsDefaultInstance() {
  ::grin::_Graph_default_instance_._instance.get_mutable()->statistics_ = const_cast< ::grin::Statistics*>(
      ::grin::Statistics::internal_default_instance());
}
class Graph::_Internal {
 public:
  static const ::grin::Statistics& statistics(const Graph* msg);
};

const ::grin::Statistics&
Graph::_Internal::statistics(const Graph* msg) {
  return *msg->statistics_;
}
Graph::Graph(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  features_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grin.Graph)
}
Graph::Graph(const Graph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      features_(from.features_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uri().empty()) {
    uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uri(),
      GetArena());
  }
  grin_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_grin_version().empty()) {
    grin_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_grin_version(),
      GetArena());
  }
  if (from._internal_has_statistics()) {
    statistics_ = new ::grin::Statistics(*from.statistics_);
  } else {
    statistics_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:grin.Graph)
}

void Graph::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Graph_graph_2eproto.base);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  grin_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  statistics_ = nullptr;
}

Graph::~Graph() {
  // @@protoc_insertion_point(destructor:grin.Graph)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Graph::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  grin_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete statistics_;
}

void Graph::ArenaDtor(void* object) {
  Graph* _this = reinterpret_cast< Graph* >(object);
  (void)_this;
}
void Graph::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Graph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Graph& Graph::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Graph_graph_2eproto.base);
  return *internal_default_instance();
}


void Graph::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.Graph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  features_.Clear();
  uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  grin_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && statistics_ != nullptr) {
    delete statistics_;
  }
  statistics_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Graph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grin.Graph.uri"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string grin_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_grin_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grin.Graph.grin_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .grin.StorageFeature features = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_features(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .grin.Statistics statistics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_statistics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Graph::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.Graph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grin.Graph.uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri(), target);
  }

  // string grin_version = 2;
  if (this->grin_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_grin_version().data(), static_cast<int>(this->_internal_grin_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grin.Graph.grin_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_grin_version(), target);
  }

  // repeated .grin.StorageFeature features = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_features_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_features(i), target, stream);
  }

  // .grin.Statistics statistics = 4;
  if (this->has_statistics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::statistics(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.Graph)
  return target;
}

size_t Graph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.Graph)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grin.StorageFeature features = 3;
  total_size += 1UL * this->_internal_features_size();
  for (const auto& msg : this->features_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string uri = 1;
  if (this->uri().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // string grin_version = 2;
  if (this->grin_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_grin_version());
  }

  // .grin.Statistics statistics = 4;
  if (this->has_statistics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statistics_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Graph::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grin.Graph)
  GOOGLE_DCHECK_NE(&from, this);
  const Graph* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Graph>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grin.Graph)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grin.Graph)
    MergeFrom(*source);
  }
}

void Graph::MergeFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grin.Graph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
  if (from.uri().size() > 0) {
    _internal_set_uri(from._internal_uri());
  }
  if (from.grin_version().size() > 0) {
    _internal_set_grin_version(from._internal_grin_version());
  }
  if (from.has_statistics()) {
    _internal_mutable_statistics()->::grin::Statistics::MergeFrom(from._internal_statistics());
  }
}

void Graph::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grin.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Graph::CopyFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph::IsInitialized() const {
  return true;
}

void Graph::InternalSwap(Graph* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  features_.InternalSwap(&other->features_);
  uri_.Swap(&other->uri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  grin_version_.Swap(&other->grin_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(statistics_, other->statistics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Graph::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace grin
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grin::TopologyFeature* Arena::CreateMaybeMessage< ::grin::TopologyFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::TopologyFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::MirrorPartitionListFeature* Arena::CreateMaybeMessage< ::grin::MirrorPartitionListFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::MirrorPartitionListFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::PartitionFeature* Arena::CreateMaybeMessage< ::grin::PartitionFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::PartitionFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::VertexPropertyFeature* Arena::CreateMaybeMessage< ::grin::VertexPropertyFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::VertexPropertyFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::EdgePropertyFeature* Arena::CreateMaybeMessage< ::grin::EdgePropertyFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::EdgePropertyFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::PropertyFeature* Arena::CreateMaybeMessage< ::grin::PropertyFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::PropertyFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::IndexFeature* Arena::CreateMaybeMessage< ::grin::IndexFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::IndexFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::PredicateFeature* Arena::CreateMaybeMessage< ::grin::PredicateFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::PredicateFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::StorageFeature* Arena::CreateMaybeMessage< ::grin::StorageFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::StorageFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::Statistics* Arena::CreateMaybeMessage< ::grin::Statistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::Statistics >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::Graph* Arena::CreateMaybeMessage< ::grin::Graph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::Graph >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
