// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gie_schema.proto

#include "gie_schema.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_gie_5fschema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EdgeType_gie_5fschema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gie_5fschema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphPartitionStrategy_gie_5fschema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gie_5fschema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GraphPropertyPartitionStrategy_gie_5fschema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gie_5fschema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Property_gie_5fschema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gie_5fschema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropertyPartitionByEntityStrategy_gie_5fschema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gie_5fschema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropertyPartitionByTypeStrategy_gie_5fschema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gie_5fschema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SrcDstPair_gie_5fschema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gie_5fschema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Statistics_gie_5fschema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gie_5fschema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VertexType_gie_5fschema_2eproto;
namespace gie {
class PropertyPartitionByEntityStrategyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropertyPartitionByEntityStrategy> _instance;
} _PropertyPartitionByEntityStrategy_default_instance_;
class PropertyPartitionByTypeStrategyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropertyPartitionByTypeStrategy> _instance;
} _PropertyPartitionByTypeStrategy_default_instance_;
class GraphPropertyPartitionStrategyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphPropertyPartitionStrategy> _instance;
  const ::gie::PropertyPartitionByEntityStrategy* by_entity_;
  const ::gie::PropertyPartitionByTypeStrategy* by_type_;
} _GraphPropertyPartitionStrategy_default_instance_;
class GraphPartitionStrategyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphPartitionStrategy> _instance;
} _GraphPartitionStrategy_default_instance_;
class SrcDstPairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SrcDstPair> _instance;
} _SrcDstPair_default_instance_;
class PropertyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Property> _instance;
} _Property_default_instance_;
class VertexTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VertexType> _instance;
} _VertexType_default_instance_;
class EdgeTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EdgeType> _instance;
} _EdgeType_default_instance_;
class StatisticsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Statistics> _instance;
} _Statistics_default_instance_;
class SchemaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Schema> _instance;
} _Schema_default_instance_;
}  // namespace gie
static void InitDefaultsscc_info_EdgeType_gie_5fschema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gie::_EdgeType_default_instance_;
    new (ptr) ::gie::EdgeType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gie::EdgeType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EdgeType_gie_5fschema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EdgeType_gie_5fschema_2eproto}, {
      &scc_info_Property_gie_5fschema_2eproto.base,
      &scc_info_SrcDstPair_gie_5fschema_2eproto.base,}};

static void InitDefaultsscc_info_GraphPartitionStrategy_gie_5fschema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gie::_GraphPartitionStrategy_default_instance_;
    new (ptr) ::gie::GraphPartitionStrategy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gie::GraphPartitionStrategy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphPartitionStrategy_gie_5fschema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GraphPartitionStrategy_gie_5fschema_2eproto}, {
      &scc_info_GraphPropertyPartitionStrategy_gie_5fschema_2eproto.base,}};

static void InitDefaultsscc_info_GraphPropertyPartitionStrategy_gie_5fschema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gie::_GraphPropertyPartitionStrategy_default_instance_;
    new (ptr) ::gie::GraphPropertyPartitionStrategy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gie::GraphPropertyPartitionStrategy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GraphPropertyPartitionStrategy_gie_5fschema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GraphPropertyPartitionStrategy_gie_5fschema_2eproto}, {
      &scc_info_PropertyPartitionByEntityStrategy_gie_5fschema_2eproto.base,
      &scc_info_PropertyPartitionByTypeStrategy_gie_5fschema_2eproto.base,}};

static void InitDefaultsscc_info_Property_gie_5fschema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gie::_Property_default_instance_;
    new (ptr) ::gie::Property();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gie::Property::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Property_gie_5fschema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Property_gie_5fschema_2eproto}, {}};

static void InitDefaultsscc_info_PropertyPartitionByEntityStrategy_gie_5fschema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gie::_PropertyPartitionByEntityStrategy_default_instance_;
    new (ptr) ::gie::PropertyPartitionByEntityStrategy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gie::PropertyPartitionByEntityStrategy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropertyPartitionByEntityStrategy_gie_5fschema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PropertyPartitionByEntityStrategy_gie_5fschema_2eproto}, {}};

static void InitDefaultsscc_info_PropertyPartitionByTypeStrategy_gie_5fschema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gie::_PropertyPartitionByTypeStrategy_default_instance_;
    new (ptr) ::gie::PropertyPartitionByTypeStrategy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gie::PropertyPartitionByTypeStrategy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropertyPartitionByTypeStrategy_gie_5fschema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PropertyPartitionByTypeStrategy_gie_5fschema_2eproto}, {}};

static void InitDefaultsscc_info_Schema_gie_5fschema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gie::_Schema_default_instance_;
    new (ptr) ::gie::Schema();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gie::Schema::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Schema_gie_5fschema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Schema_gie_5fschema_2eproto}, {
      &scc_info_GraphPartitionStrategy_gie_5fschema_2eproto.base,
      &scc_info_VertexType_gie_5fschema_2eproto.base,
      &scc_info_EdgeType_gie_5fschema_2eproto.base,
      &scc_info_Statistics_gie_5fschema_2eproto.base,}};

static void InitDefaultsscc_info_SrcDstPair_gie_5fschema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gie::_SrcDstPair_default_instance_;
    new (ptr) ::gie::SrcDstPair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gie::SrcDstPair::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SrcDstPair_gie_5fschema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SrcDstPair_gie_5fschema_2eproto}, {}};

static void InitDefaultsscc_info_Statistics_gie_5fschema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gie::_Statistics_default_instance_;
    new (ptr) ::gie::Statistics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gie::Statistics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Statistics_gie_5fschema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Statistics_gie_5fschema_2eproto}, {}};

static void InitDefaultsscc_info_VertexType_gie_5fschema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gie::_VertexType_default_instance_;
    new (ptr) ::gie::VertexType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gie::VertexType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VertexType_gie_5fschema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VertexType_gie_5fschema_2eproto}, {
      &scc_info_Property_gie_5fschema_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gie_5fschema_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_gie_5fschema_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gie_5fschema_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gie_5fschema_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gie::PropertyPartitionByEntityStrategy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gie::PropertyPartitionByEntityStrategy, vertex_property_partition_strategy_),
  PROTOBUF_FIELD_OFFSET(::gie::PropertyPartitionByEntityStrategy, edge_property_partition_strategy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gie::PropertyPartitionByTypeStrategy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gie::GraphPropertyPartitionStrategy, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::gie::GraphPropertyPartitionStrategy, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::gie::GraphPropertyPartitionStrategyDefaultTypeInternal, by_entity_),
  offsetof(::gie::GraphPropertyPartitionStrategyDefaultTypeInternal, by_type_),
  PROTOBUF_FIELD_OFFSET(::gie::GraphPropertyPartitionStrategy, item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gie::GraphPartitionStrategy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gie::GraphPartitionStrategy, topology_),
  PROTOBUF_FIELD_OFFSET(::gie::GraphPartitionStrategy, property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gie::SrcDstPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gie::SrcDstPair, src_type_),
  PROTOBUF_FIELD_OFFSET(::gie::SrcDstPair, dst_type_),
  PROTOBUF_FIELD_OFFSET(::gie::SrcDstPair, partition_strategy_),
  PROTOBUF_FIELD_OFFSET(::gie::SrcDstPair, property_partition_strategy_),
  PROTOBUF_FIELD_OFFSET(::gie::SrcDstPair, relation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gie::Property, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gie::Property, id_),
  PROTOBUF_FIELD_OFFSET(::gie::Property, name_),
  PROTOBUF_FIELD_OFFSET(::gie::Property, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gie::VertexType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gie::VertexType, id_),
  PROTOBUF_FIELD_OFFSET(::gie::VertexType, name_),
  PROTOBUF_FIELD_OFFSET(::gie::VertexType, properties_),
  PROTOBUF_FIELD_OFFSET(::gie::VertexType, primary_keys_),
  PROTOBUF_FIELD_OFFSET(::gie::VertexType, partition_strategy_),
  PROTOBUF_FIELD_OFFSET(::gie::VertexType, property_partition_strategy_),
  PROTOBUF_FIELD_OFFSET(::gie::VertexType, total_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gie::EdgeType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gie::EdgeType, id_),
  PROTOBUF_FIELD_OFFSET(::gie::EdgeType, name_),
  PROTOBUF_FIELD_OFFSET(::gie::EdgeType, properties_),
  PROTOBUF_FIELD_OFFSET(::gie::EdgeType, primary_keys_),
  PROTOBUF_FIELD_OFFSET(::gie::EdgeType, src_dst_pairs_),
  PROTOBUF_FIELD_OFFSET(::gie::EdgeType, total_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gie::Statistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gie::Statistics, num_partitions_),
  PROTOBUF_FIELD_OFFSET(::gie::Statistics, num_vertices_),
  PROTOBUF_FIELD_OFFSET(::gie::Statistics, num_edges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gie::Schema, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gie::Schema, partition_strategy_),
  PROTOBUF_FIELD_OFFSET(::gie::Schema, vertex_types_),
  PROTOBUF_FIELD_OFFSET(::gie::Schema, edge_types_),
  PROTOBUF_FIELD_OFFSET(::gie::Schema, statistics_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gie::PropertyPartitionByEntityStrategy)},
  { 7, -1, sizeof(::gie::PropertyPartitionByTypeStrategy)},
  { 12, -1, sizeof(::gie::GraphPropertyPartitionStrategy)},
  { 20, -1, sizeof(::gie::GraphPartitionStrategy)},
  { 27, -1, sizeof(::gie::SrcDstPair)},
  { 37, -1, sizeof(::gie::Property)},
  { 45, -1, sizeof(::gie::VertexType)},
  { 57, -1, sizeof(::gie::EdgeType)},
  { 68, -1, sizeof(::gie::Statistics)},
  { 76, -1, sizeof(::gie::Schema)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gie::_PropertyPartitionByEntityStrategy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gie::_PropertyPartitionByTypeStrategy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gie::_GraphPropertyPartitionStrategy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gie::_GraphPartitionStrategy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gie::_SrcDstPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gie::_Property_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gie::_VertexType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gie::_EdgeType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gie::_Statistics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gie::_Schema_default_instance_),
};

const char descriptor_table_protodef_gie_5fschema_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020gie_schema.proto\022\003gie\"\271\001\n!PropertyPart"
  "itionByEntityStrategy\022J\n\"vertex_property"
  "_partition_strategy\030\001 \001(\0162\036.gie.Property"
  "PartitionStrategy\022H\n edge_property_parti"
  "tion_strategy\030\002 \001(\0162\036.gie.PropertyPartit"
  "ionStrategy\"!\n\037PropertyPartitionByTypeSt"
  "rategy\"\236\001\n\036GraphPropertyPartitionStrateg"
  "y\022;\n\tby_entity\030\001 \001(\0132&.gie.PropertyParti"
  "tionByEntityStrategyH\000\0227\n\007by_type\030\002 \001(\0132"
  "$.gie.PropertyPartitionByTypeStrategyH\000B"
  "\006\n\004item\"\206\001\n\026GraphPartitionStrategy\0225\n\010to"
  "pology\030\001 \001(\0162#.gie.GraphTopologyPartitio"
  "nStrategy\0225\n\010property\030\002 \001(\0132#.gie.GraphP"
  "ropertyPartitionStrategy\"\316\001\n\nSrcDstPair\022"
  "\020\n\010src_type\030\001 \001(\t\022\020\n\010dst_type\030\002 \001(\t\0226\n\022p"
  "artition_strategy\030\003 \001(\0162\032.gie.EdgePartit"
  "ionStrategy\022C\n\033property_partition_strate"
  "gy\030\004 \001(\0162\036.gie.PropertyPartitionStrategy"
  "\022\037\n\010relation\030\005 \001(\0162\r.gie.Relation\"A\n\010Pro"
  "perty\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\033\n\004type\030"
  "\003 \001(\0162\r.gie.DataType\"\361\001\n\nVertexType\022\n\n\002i"
  "d\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022!\n\nproperties\030\003 \003("
  "\0132\r.gie.Property\022\024\n\014primary_keys\030\004 \003(\t\0228"
  "\n\022partition_strategy\030\005 \001(\0162\034.gie.VertexP"
  "artitionStrategy\022C\n\033property_partition_s"
  "trategy\030\006 \001(\0162\036.gie.PropertyPartitionStr"
  "ategy\022\021\n\ttotal_num\030\007 \001(\003\"\230\001\n\010EdgeType\022\n\n"
  "\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022!\n\nproperties\030\003 "
  "\003(\0132\r.gie.Property\022\024\n\014primary_keys\030\004 \003(\t"
  "\022&\n\rsrc_dst_pairs\030\005 \003(\0132\017.gie.SrcDstPair"
  "\022\021\n\ttotal_num\030\006 \001(\003\"M\n\nStatistics\022\026\n\016num"
  "_partitions\030\001 \001(\r\022\024\n\014num_vertices\030\002 \001(\004\022"
  "\021\n\tnum_edges\030\003 \001(\004\"\260\001\n\006Schema\0227\n\022partiti"
  "on_strategy\030\001 \001(\0132\033.gie.GraphPartitionSt"
  "rategy\022%\n\014vertex_types\030\002 \003(\0132\017.gie.Verte"
  "xType\022!\n\nedge_types\030\003 \003(\0132\r.gie.EdgeType"
  "\022#\n\nstatistics\030\004 \001(\0132\017.gie.Statistics*[\n"
  "\027VertexPartitionStrategy\022\021\n\rVPS_UNDEFINE"
  "D\020\000\022\013\n\007VPS_ALL\020\001\022\013\n\007VPS_ONE\020\002\022\023\n\017VPS_FOL"
  "LOW_EDGE\020\003*\201\001\n\025EdgePartitionStrategy\022\021\n\r"
  "EPS_UNDEFINED\020\000\022\013\n\007EPS_ALL\020\001\022\013\n\007EPS_ONE\020"
  "\002\022\022\n\016EPS_FOLLOW_SRC\020\003\022\022\n\016EPS_FOLLOW_DST\020"
  "\004\022\023\n\017EPS_FOLLOW_BOTH\020\005*U\n\031PropertyPartit"
  "ionStrategy\022\021\n\rPPS_UNDEFINED\020\000\022\016\n\nPPS_MA"
  "STER\020\001\022\025\n\021PPS_MASTER_MIRROR\020\002*\306\001\n\036GraphT"
  "opologyPartitionStrategy\022\021\n\rGPS_UNDEFINE"
  "D\020\000\022\025\n\021GPS_ALL_REPLICATE\020\001\022\034\n\030GPS_EDGE_C"
  "UT_FOLLOW_BOTH\020\002\022\033\n\027GPS_EDGE_CUT_FOLLOW_"
  "SRC\020\003\022\033\n\027GPS_EDGE_CUT_FOLLOW_DST\020\004\022\022\n\016GP"
  "S_VERTEX_CUT\020\005\022\016\n\nGPS_HYBRID\020\006*a\n\010Relati"
  "on\022\021\n\rREL_UNDEFINED\020\000\022\020\n\014MANY_TO_MANY\020\001\022"
  "\017\n\013MANY_TO_ONE\020\002\022\017\n\013ONE_TO_MANY\020\003\022\016\n\nONE"
  "_TO_ONE\020\004*\312\001\n\010DataType\022\016\n\nDT_UNKNOWN\020\000\022\023"
  "\n\017DT_SIGNED_INT32\020\001\022\025\n\021DT_UNSIGNED_INT32"
  "\020\002\022\023\n\017DT_SIGNED_INT64\020\003\022\025\n\021DT_UNSIGNED_I"
  "NT64\020\004\022\014\n\010DT_FLOAT\020\005\022\r\n\tDT_DOUBLE\020\006\022\r\n\tD"
  "T_STRING\020\007\022\013\n\007DT_DATE\020\010\022\013\n\007DT_TIME\020\t\022\020\n\014"
  "DT_TIMESTAMP\020\nB%\n#com.alibaba.graphscope"
  ".proto.schemab\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gie_5fschema_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gie_5fschema_2eproto_sccs[10] = {
  &scc_info_EdgeType_gie_5fschema_2eproto.base,
  &scc_info_GraphPartitionStrategy_gie_5fschema_2eproto.base,
  &scc_info_GraphPropertyPartitionStrategy_gie_5fschema_2eproto.base,
  &scc_info_Property_gie_5fschema_2eproto.base,
  &scc_info_PropertyPartitionByEntityStrategy_gie_5fschema_2eproto.base,
  &scc_info_PropertyPartitionByTypeStrategy_gie_5fschema_2eproto.base,
  &scc_info_Schema_gie_5fschema_2eproto.base,
  &scc_info_SrcDstPair_gie_5fschema_2eproto.base,
  &scc_info_Statistics_gie_5fschema_2eproto.base,
  &scc_info_VertexType_gie_5fschema_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gie_5fschema_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gie_5fschema_2eproto = {
  false, false, descriptor_table_protodef_gie_5fschema_2eproto, "gie_schema.proto", 2341,
  &descriptor_table_gie_5fschema_2eproto_once, descriptor_table_gie_5fschema_2eproto_sccs, descriptor_table_gie_5fschema_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_gie_5fschema_2eproto::offsets,
  file_level_metadata_gie_5fschema_2eproto, 10, file_level_enum_descriptors_gie_5fschema_2eproto, file_level_service_descriptors_gie_5fschema_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gie_5fschema_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gie_5fschema_2eproto)), true);
namespace gie {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VertexPartitionStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gie_5fschema_2eproto);
  return file_level_enum_descriptors_gie_5fschema_2eproto[0];
}
bool VertexPartitionStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EdgePartitionStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gie_5fschema_2eproto);
  return file_level_enum_descriptors_gie_5fschema_2eproto[1];
}
bool EdgePartitionStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PropertyPartitionStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gie_5fschema_2eproto);
  return file_level_enum_descriptors_gie_5fschema_2eproto[2];
}
bool PropertyPartitionStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GraphTopologyPartitionStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gie_5fschema_2eproto);
  return file_level_enum_descriptors_gie_5fschema_2eproto[3];
}
bool GraphTopologyPartitionStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Relation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gie_5fschema_2eproto);
  return file_level_enum_descriptors_gie_5fschema_2eproto[4];
}
bool Relation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gie_5fschema_2eproto);
  return file_level_enum_descriptors_gie_5fschema_2eproto[5];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PropertyPartitionByEntityStrategy::InitAsDefaultInstance() {
}
class PropertyPartitionByEntityStrategy::_Internal {
 public:
};

PropertyPartitionByEntityStrategy::PropertyPartitionByEntityStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gie.PropertyPartitionByEntityStrategy)
}
PropertyPartitionByEntityStrategy::PropertyPartitionByEntityStrategy(const PropertyPartitionByEntityStrategy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&vertex_property_partition_strategy_, &from.vertex_property_partition_strategy_,
    static_cast<size_t>(reinterpret_cast<char*>(&edge_property_partition_strategy_) -
    reinterpret_cast<char*>(&vertex_property_partition_strategy_)) + sizeof(edge_property_partition_strategy_));
  // @@protoc_insertion_point(copy_constructor:gie.PropertyPartitionByEntityStrategy)
}

void PropertyPartitionByEntityStrategy::SharedCtor() {
  ::memset(&vertex_property_partition_strategy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&edge_property_partition_strategy_) -
      reinterpret_cast<char*>(&vertex_property_partition_strategy_)) + sizeof(edge_property_partition_strategy_));
}

PropertyPartitionByEntityStrategy::~PropertyPartitionByEntityStrategy() {
  // @@protoc_insertion_point(destructor:gie.PropertyPartitionByEntityStrategy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PropertyPartitionByEntityStrategy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PropertyPartitionByEntityStrategy::ArenaDtor(void* object) {
  PropertyPartitionByEntityStrategy* _this = reinterpret_cast< PropertyPartitionByEntityStrategy* >(object);
  (void)_this;
}
void PropertyPartitionByEntityStrategy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PropertyPartitionByEntityStrategy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropertyPartitionByEntityStrategy& PropertyPartitionByEntityStrategy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropertyPartitionByEntityStrategy_gie_5fschema_2eproto.base);
  return *internal_default_instance();
}


void PropertyPartitionByEntityStrategy::Clear() {
// @@protoc_insertion_point(message_clear_start:gie.PropertyPartitionByEntityStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vertex_property_partition_strategy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&edge_property_partition_strategy_) -
      reinterpret_cast<char*>(&vertex_property_partition_strategy_)) + sizeof(edge_property_partition_strategy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertyPartitionByEntityStrategy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gie.PropertyPartitionStrategy vertex_property_partition_strategy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_vertex_property_partition_strategy(static_cast<::gie::PropertyPartitionStrategy>(val));
        } else goto handle_unusual;
        continue;
      // .gie.PropertyPartitionStrategy edge_property_partition_strategy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_edge_property_partition_strategy(static_cast<::gie::PropertyPartitionStrategy>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PropertyPartitionByEntityStrategy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gie.PropertyPartitionByEntityStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gie.PropertyPartitionStrategy vertex_property_partition_strategy = 1;
  if (this->vertex_property_partition_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_vertex_property_partition_strategy(), target);
  }

  // .gie.PropertyPartitionStrategy edge_property_partition_strategy = 2;
  if (this->edge_property_partition_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_edge_property_partition_strategy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gie.PropertyPartitionByEntityStrategy)
  return target;
}

size_t PropertyPartitionByEntityStrategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gie.PropertyPartitionByEntityStrategy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gie.PropertyPartitionStrategy vertex_property_partition_strategy = 1;
  if (this->vertex_property_partition_strategy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vertex_property_partition_strategy());
  }

  // .gie.PropertyPartitionStrategy edge_property_partition_strategy = 2;
  if (this->edge_property_partition_strategy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_edge_property_partition_strategy());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyPartitionByEntityStrategy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gie.PropertyPartitionByEntityStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyPartitionByEntityStrategy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropertyPartitionByEntityStrategy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gie.PropertyPartitionByEntityStrategy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gie.PropertyPartitionByEntityStrategy)
    MergeFrom(*source);
  }
}

void PropertyPartitionByEntityStrategy::MergeFrom(const PropertyPartitionByEntityStrategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gie.PropertyPartitionByEntityStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vertex_property_partition_strategy() != 0) {
    _internal_set_vertex_property_partition_strategy(from._internal_vertex_property_partition_strategy());
  }
  if (from.edge_property_partition_strategy() != 0) {
    _internal_set_edge_property_partition_strategy(from._internal_edge_property_partition_strategy());
  }
}

void PropertyPartitionByEntityStrategy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gie.PropertyPartitionByEntityStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyPartitionByEntityStrategy::CopyFrom(const PropertyPartitionByEntityStrategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gie.PropertyPartitionByEntityStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyPartitionByEntityStrategy::IsInitialized() const {
  return true;
}

void PropertyPartitionByEntityStrategy::InternalSwap(PropertyPartitionByEntityStrategy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PropertyPartitionByEntityStrategy, edge_property_partition_strategy_)
      + sizeof(PropertyPartitionByEntityStrategy::edge_property_partition_strategy_)
      - PROTOBUF_FIELD_OFFSET(PropertyPartitionByEntityStrategy, vertex_property_partition_strategy_)>(
          reinterpret_cast<char*>(&vertex_property_partition_strategy_),
          reinterpret_cast<char*>(&other->vertex_property_partition_strategy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyPartitionByEntityStrategy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PropertyPartitionByTypeStrategy::InitAsDefaultInstance() {
}
class PropertyPartitionByTypeStrategy::_Internal {
 public:
};

PropertyPartitionByTypeStrategy::PropertyPartitionByTypeStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gie.PropertyPartitionByTypeStrategy)
}
PropertyPartitionByTypeStrategy::PropertyPartitionByTypeStrategy(const PropertyPartitionByTypeStrategy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gie.PropertyPartitionByTypeStrategy)
}

void PropertyPartitionByTypeStrategy::SharedCtor() {
}

PropertyPartitionByTypeStrategy::~PropertyPartitionByTypeStrategy() {
  // @@protoc_insertion_point(destructor:gie.PropertyPartitionByTypeStrategy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PropertyPartitionByTypeStrategy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PropertyPartitionByTypeStrategy::ArenaDtor(void* object) {
  PropertyPartitionByTypeStrategy* _this = reinterpret_cast< PropertyPartitionByTypeStrategy* >(object);
  (void)_this;
}
void PropertyPartitionByTypeStrategy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PropertyPartitionByTypeStrategy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropertyPartitionByTypeStrategy& PropertyPartitionByTypeStrategy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropertyPartitionByTypeStrategy_gie_5fschema_2eproto.base);
  return *internal_default_instance();
}


void PropertyPartitionByTypeStrategy::Clear() {
// @@protoc_insertion_point(message_clear_start:gie.PropertyPartitionByTypeStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertyPartitionByTypeStrategy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PropertyPartitionByTypeStrategy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gie.PropertyPartitionByTypeStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gie.PropertyPartitionByTypeStrategy)
  return target;
}

size_t PropertyPartitionByTypeStrategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gie.PropertyPartitionByTypeStrategy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyPartitionByTypeStrategy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gie.PropertyPartitionByTypeStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyPartitionByTypeStrategy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropertyPartitionByTypeStrategy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gie.PropertyPartitionByTypeStrategy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gie.PropertyPartitionByTypeStrategy)
    MergeFrom(*source);
  }
}

void PropertyPartitionByTypeStrategy::MergeFrom(const PropertyPartitionByTypeStrategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gie.PropertyPartitionByTypeStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PropertyPartitionByTypeStrategy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gie.PropertyPartitionByTypeStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyPartitionByTypeStrategy::CopyFrom(const PropertyPartitionByTypeStrategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gie.PropertyPartitionByTypeStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyPartitionByTypeStrategy::IsInitialized() const {
  return true;
}

void PropertyPartitionByTypeStrategy::InternalSwap(PropertyPartitionByTypeStrategy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyPartitionByTypeStrategy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GraphPropertyPartitionStrategy::InitAsDefaultInstance() {
  ::gie::_GraphPropertyPartitionStrategy_default_instance_.by_entity_ = const_cast< ::gie::PropertyPartitionByEntityStrategy*>(
      ::gie::PropertyPartitionByEntityStrategy::internal_default_instance());
  ::gie::_GraphPropertyPartitionStrategy_default_instance_.by_type_ = const_cast< ::gie::PropertyPartitionByTypeStrategy*>(
      ::gie::PropertyPartitionByTypeStrategy::internal_default_instance());
}
class GraphPropertyPartitionStrategy::_Internal {
 public:
  static const ::gie::PropertyPartitionByEntityStrategy& by_entity(const GraphPropertyPartitionStrategy* msg);
  static const ::gie::PropertyPartitionByTypeStrategy& by_type(const GraphPropertyPartitionStrategy* msg);
};

const ::gie::PropertyPartitionByEntityStrategy&
GraphPropertyPartitionStrategy::_Internal::by_entity(const GraphPropertyPartitionStrategy* msg) {
  return *msg->item_.by_entity_;
}
const ::gie::PropertyPartitionByTypeStrategy&
GraphPropertyPartitionStrategy::_Internal::by_type(const GraphPropertyPartitionStrategy* msg) {
  return *msg->item_.by_type_;
}
void GraphPropertyPartitionStrategy::set_allocated_by_entity(::gie::PropertyPartitionByEntityStrategy* by_entity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_item();
  if (by_entity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(by_entity);
    if (message_arena != submessage_arena) {
      by_entity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, by_entity, submessage_arena);
    }
    set_has_by_entity();
    item_.by_entity_ = by_entity;
  }
  // @@protoc_insertion_point(field_set_allocated:gie.GraphPropertyPartitionStrategy.by_entity)
}
void GraphPropertyPartitionStrategy::set_allocated_by_type(::gie::PropertyPartitionByTypeStrategy* by_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_item();
  if (by_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(by_type);
    if (message_arena != submessage_arena) {
      by_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, by_type, submessage_arena);
    }
    set_has_by_type();
    item_.by_type_ = by_type;
  }
  // @@protoc_insertion_point(field_set_allocated:gie.GraphPropertyPartitionStrategy.by_type)
}
GraphPropertyPartitionStrategy::GraphPropertyPartitionStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gie.GraphPropertyPartitionStrategy)
}
GraphPropertyPartitionStrategy::GraphPropertyPartitionStrategy(const GraphPropertyPartitionStrategy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_item();
  switch (from.item_case()) {
    case kByEntity: {
      _internal_mutable_by_entity()->::gie::PropertyPartitionByEntityStrategy::MergeFrom(from._internal_by_entity());
      break;
    }
    case kByType: {
      _internal_mutable_by_type()->::gie::PropertyPartitionByTypeStrategy::MergeFrom(from._internal_by_type());
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:gie.GraphPropertyPartitionStrategy)
}

void GraphPropertyPartitionStrategy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphPropertyPartitionStrategy_gie_5fschema_2eproto.base);
  clear_has_item();
}

GraphPropertyPartitionStrategy::~GraphPropertyPartitionStrategy() {
  // @@protoc_insertion_point(destructor:gie.GraphPropertyPartitionStrategy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GraphPropertyPartitionStrategy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_item()) {
    clear_item();
  }
}

void GraphPropertyPartitionStrategy::ArenaDtor(void* object) {
  GraphPropertyPartitionStrategy* _this = reinterpret_cast< GraphPropertyPartitionStrategy* >(object);
  (void)_this;
}
void GraphPropertyPartitionStrategy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphPropertyPartitionStrategy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphPropertyPartitionStrategy& GraphPropertyPartitionStrategy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphPropertyPartitionStrategy_gie_5fschema_2eproto.base);
  return *internal_default_instance();
}


void GraphPropertyPartitionStrategy::clear_item() {
// @@protoc_insertion_point(one_of_clear_start:gie.GraphPropertyPartitionStrategy)
  switch (item_case()) {
    case kByEntity: {
      if (GetArena() == nullptr) {
        delete item_.by_entity_;
      }
      break;
    }
    case kByType: {
      if (GetArena() == nullptr) {
        delete item_.by_type_;
      }
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ITEM_NOT_SET;
}


void GraphPropertyPartitionStrategy::Clear() {
// @@protoc_insertion_point(message_clear_start:gie.GraphPropertyPartitionStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_item();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphPropertyPartitionStrategy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gie.PropertyPartitionByEntityStrategy by_entity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_by_entity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gie.PropertyPartitionByTypeStrategy by_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_by_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphPropertyPartitionStrategy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gie.GraphPropertyPartitionStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gie.PropertyPartitionByEntityStrategy by_entity = 1;
  if (_internal_has_by_entity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::by_entity(this), target, stream);
  }

  // .gie.PropertyPartitionByTypeStrategy by_type = 2;
  if (_internal_has_by_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::by_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gie.GraphPropertyPartitionStrategy)
  return target;
}

size_t GraphPropertyPartitionStrategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gie.GraphPropertyPartitionStrategy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (item_case()) {
    // .gie.PropertyPartitionByEntityStrategy by_entity = 1;
    case kByEntity: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_.by_entity_);
      break;
    }
    // .gie.PropertyPartitionByTypeStrategy by_type = 2;
    case kByType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_.by_type_);
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphPropertyPartitionStrategy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gie.GraphPropertyPartitionStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphPropertyPartitionStrategy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GraphPropertyPartitionStrategy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gie.GraphPropertyPartitionStrategy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gie.GraphPropertyPartitionStrategy)
    MergeFrom(*source);
  }
}

void GraphPropertyPartitionStrategy::MergeFrom(const GraphPropertyPartitionStrategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gie.GraphPropertyPartitionStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.item_case()) {
    case kByEntity: {
      _internal_mutable_by_entity()->::gie::PropertyPartitionByEntityStrategy::MergeFrom(from._internal_by_entity());
      break;
    }
    case kByType: {
      _internal_mutable_by_type()->::gie::PropertyPartitionByTypeStrategy::MergeFrom(from._internal_by_type());
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
}

void GraphPropertyPartitionStrategy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gie.GraphPropertyPartitionStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphPropertyPartitionStrategy::CopyFrom(const GraphPropertyPartitionStrategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gie.GraphPropertyPartitionStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphPropertyPartitionStrategy::IsInitialized() const {
  return true;
}

void GraphPropertyPartitionStrategy::InternalSwap(GraphPropertyPartitionStrategy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(item_, other->item_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphPropertyPartitionStrategy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GraphPartitionStrategy::InitAsDefaultInstance() {
  ::gie::_GraphPartitionStrategy_default_instance_._instance.get_mutable()->property_ = const_cast< ::gie::GraphPropertyPartitionStrategy*>(
      ::gie::GraphPropertyPartitionStrategy::internal_default_instance());
}
class GraphPartitionStrategy::_Internal {
 public:
  static const ::gie::GraphPropertyPartitionStrategy& property(const GraphPartitionStrategy* msg);
};

const ::gie::GraphPropertyPartitionStrategy&
GraphPartitionStrategy::_Internal::property(const GraphPartitionStrategy* msg) {
  return *msg->property_;
}
GraphPartitionStrategy::GraphPartitionStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gie.GraphPartitionStrategy)
}
GraphPartitionStrategy::GraphPartitionStrategy(const GraphPartitionStrategy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_property()) {
    property_ = new ::gie::GraphPropertyPartitionStrategy(*from.property_);
  } else {
    property_ = nullptr;
  }
  topology_ = from.topology_;
  // @@protoc_insertion_point(copy_constructor:gie.GraphPartitionStrategy)
}

void GraphPartitionStrategy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphPartitionStrategy_gie_5fschema_2eproto.base);
  ::memset(&property_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&topology_) -
      reinterpret_cast<char*>(&property_)) + sizeof(topology_));
}

GraphPartitionStrategy::~GraphPartitionStrategy() {
  // @@protoc_insertion_point(destructor:gie.GraphPartitionStrategy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GraphPartitionStrategy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete property_;
}

void GraphPartitionStrategy::ArenaDtor(void* object) {
  GraphPartitionStrategy* _this = reinterpret_cast< GraphPartitionStrategy* >(object);
  (void)_this;
}
void GraphPartitionStrategy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphPartitionStrategy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphPartitionStrategy& GraphPartitionStrategy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphPartitionStrategy_gie_5fschema_2eproto.base);
  return *internal_default_instance();
}


void GraphPartitionStrategy::Clear() {
// @@protoc_insertion_point(message_clear_start:gie.GraphPartitionStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && property_ != nullptr) {
    delete property_;
  }
  property_ = nullptr;
  topology_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphPartitionStrategy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gie.GraphTopologyPartitionStrategy topology = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_topology(static_cast<::gie::GraphTopologyPartitionStrategy>(val));
        } else goto handle_unusual;
        continue;
      // .gie.GraphPropertyPartitionStrategy property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_property(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphPartitionStrategy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gie.GraphPartitionStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gie.GraphTopologyPartitionStrategy topology = 1;
  if (this->topology() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_topology(), target);
  }

  // .gie.GraphPropertyPartitionStrategy property = 2;
  if (this->has_property()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::property(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gie.GraphPartitionStrategy)
  return target;
}

size_t GraphPartitionStrategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gie.GraphPartitionStrategy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gie.GraphPropertyPartitionStrategy property = 2;
  if (this->has_property()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *property_);
  }

  // .gie.GraphTopologyPartitionStrategy topology = 1;
  if (this->topology() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_topology());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphPartitionStrategy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gie.GraphPartitionStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphPartitionStrategy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GraphPartitionStrategy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gie.GraphPartitionStrategy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gie.GraphPartitionStrategy)
    MergeFrom(*source);
  }
}

void GraphPartitionStrategy::MergeFrom(const GraphPartitionStrategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gie.GraphPartitionStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_property()) {
    _internal_mutable_property()->::gie::GraphPropertyPartitionStrategy::MergeFrom(from._internal_property());
  }
  if (from.topology() != 0) {
    _internal_set_topology(from._internal_topology());
  }
}

void GraphPartitionStrategy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gie.GraphPartitionStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphPartitionStrategy::CopyFrom(const GraphPartitionStrategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gie.GraphPartitionStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphPartitionStrategy::IsInitialized() const {
  return true;
}

void GraphPartitionStrategy::InternalSwap(GraphPartitionStrategy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphPartitionStrategy, topology_)
      + sizeof(GraphPartitionStrategy::topology_)
      - PROTOBUF_FIELD_OFFSET(GraphPartitionStrategy, property_)>(
          reinterpret_cast<char*>(&property_),
          reinterpret_cast<char*>(&other->property_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphPartitionStrategy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SrcDstPair::InitAsDefaultInstance() {
}
class SrcDstPair::_Internal {
 public:
};

SrcDstPair::SrcDstPair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gie.SrcDstPair)
}
SrcDstPair::SrcDstPair(const SrcDstPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  src_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_src_type().empty()) {
    src_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_src_type(),
      GetArena());
  }
  dst_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dst_type().empty()) {
    dst_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dst_type(),
      GetArena());
  }
  ::memcpy(&partition_strategy_, &from.partition_strategy_,
    static_cast<size_t>(reinterpret_cast<char*>(&relation_) -
    reinterpret_cast<char*>(&partition_strategy_)) + sizeof(relation_));
  // @@protoc_insertion_point(copy_constructor:gie.SrcDstPair)
}

void SrcDstPair::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SrcDstPair_gie_5fschema_2eproto.base);
  src_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&partition_strategy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relation_) -
      reinterpret_cast<char*>(&partition_strategy_)) + sizeof(relation_));
}

SrcDstPair::~SrcDstPair() {
  // @@protoc_insertion_point(destructor:gie.SrcDstPair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SrcDstPair::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  src_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SrcDstPair::ArenaDtor(void* object) {
  SrcDstPair* _this = reinterpret_cast< SrcDstPair* >(object);
  (void)_this;
}
void SrcDstPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SrcDstPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SrcDstPair& SrcDstPair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SrcDstPair_gie_5fschema_2eproto.base);
  return *internal_default_instance();
}


void SrcDstPair::Clear() {
// @@protoc_insertion_point(message_clear_start:gie.SrcDstPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  src_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dst_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&partition_strategy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relation_) -
      reinterpret_cast<char*>(&partition_strategy_)) + sizeof(relation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SrcDstPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string src_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gie.SrcDstPair.src_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dst_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dst_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gie.SrcDstPair.dst_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gie.EdgePartitionStrategy partition_strategy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_partition_strategy(static_cast<::gie::EdgePartitionStrategy>(val));
        } else goto handle_unusual;
        continue;
      // .gie.PropertyPartitionStrategy property_partition_strategy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_property_partition_strategy(static_cast<::gie::PropertyPartitionStrategy>(val));
        } else goto handle_unusual;
        continue;
      // .gie.Relation relation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_relation(static_cast<::gie::Relation>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SrcDstPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gie.SrcDstPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string src_type = 1;
  if (this->src_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src_type().data(), static_cast<int>(this->_internal_src_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gie.SrcDstPair.src_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_src_type(), target);
  }

  // string dst_type = 2;
  if (this->dst_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dst_type().data(), static_cast<int>(this->_internal_dst_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gie.SrcDstPair.dst_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dst_type(), target);
  }

  // .gie.EdgePartitionStrategy partition_strategy = 3;
  if (this->partition_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_partition_strategy(), target);
  }

  // .gie.PropertyPartitionStrategy property_partition_strategy = 4;
  if (this->property_partition_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_property_partition_strategy(), target);
  }

  // .gie.Relation relation = 5;
  if (this->relation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_relation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gie.SrcDstPair)
  return target;
}

size_t SrcDstPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gie.SrcDstPair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string src_type = 1;
  if (this->src_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src_type());
  }

  // string dst_type = 2;
  if (this->dst_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dst_type());
  }

  // .gie.EdgePartitionStrategy partition_strategy = 3;
  if (this->partition_strategy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_partition_strategy());
  }

  // .gie.PropertyPartitionStrategy property_partition_strategy = 4;
  if (this->property_partition_strategy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_property_partition_strategy());
  }

  // .gie.Relation relation = 5;
  if (this->relation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_relation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SrcDstPair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gie.SrcDstPair)
  GOOGLE_DCHECK_NE(&from, this);
  const SrcDstPair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SrcDstPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gie.SrcDstPair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gie.SrcDstPair)
    MergeFrom(*source);
  }
}

void SrcDstPair::MergeFrom(const SrcDstPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gie.SrcDstPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.src_type().size() > 0) {
    _internal_set_src_type(from._internal_src_type());
  }
  if (from.dst_type().size() > 0) {
    _internal_set_dst_type(from._internal_dst_type());
  }
  if (from.partition_strategy() != 0) {
    _internal_set_partition_strategy(from._internal_partition_strategy());
  }
  if (from.property_partition_strategy() != 0) {
    _internal_set_property_partition_strategy(from._internal_property_partition_strategy());
  }
  if (from.relation() != 0) {
    _internal_set_relation(from._internal_relation());
  }
}

void SrcDstPair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gie.SrcDstPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrcDstPair::CopyFrom(const SrcDstPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gie.SrcDstPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrcDstPair::IsInitialized() const {
  return true;
}

void SrcDstPair::InternalSwap(SrcDstPair* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  src_type_.Swap(&other->src_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dst_type_.Swap(&other->dst_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SrcDstPair, relation_)
      + sizeof(SrcDstPair::relation_)
      - PROTOBUF_FIELD_OFFSET(SrcDstPair, partition_strategy_)>(
          reinterpret_cast<char*>(&partition_strategy_),
          reinterpret_cast<char*>(&other->partition_strategy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SrcDstPair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Property::InitAsDefaultInstance() {
}
class Property::_Internal {
 public:
};

Property::Property(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gie.Property)
}
Property::Property(const Property& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:gie.Property)
}

void Property::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Property_gie_5fschema_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

Property::~Property() {
  // @@protoc_insertion_point(destructor:gie.Property)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Property::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Property::ArenaDtor(void* object) {
  Property* _this = reinterpret_cast< Property* >(object);
  (void)_this;
}
void Property::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Property::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Property& Property::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Property_gie_5fschema_2eproto.base);
  return *internal_default_instance();
}


void Property::Clear() {
// @@protoc_insertion_point(message_clear_start:gie.Property)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Property::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gie.Property.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gie.DataType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::gie::DataType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Property::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gie.Property)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gie.Property.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .gie.DataType type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gie.Property)
  return target;
}

size_t Property::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gie.Property)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // .gie.DataType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Property::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gie.Property)
  GOOGLE_DCHECK_NE(&from, this);
  const Property* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Property>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gie.Property)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gie.Property)
    MergeFrom(*source);
  }
}

void Property::MergeFrom(const Property& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gie.Property)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Property::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gie.Property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Property::CopyFrom(const Property& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gie.Property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property::IsInitialized() const {
  return true;
}

void Property::InternalSwap(Property* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Property, type_)
      + sizeof(Property::type_)
      - PROTOBUF_FIELD_OFFSET(Property, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Property::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VertexType::InitAsDefaultInstance() {
}
class VertexType::_Internal {
 public:
};

VertexType::VertexType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  properties_(arena),
  primary_keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gie.VertexType)
}
VertexType::VertexType(const VertexType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      properties_(from.properties_),
      primary_keys_(from.primary_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&property_partition_strategy_) -
    reinterpret_cast<char*>(&id_)) + sizeof(property_partition_strategy_));
  // @@protoc_insertion_point(copy_constructor:gie.VertexType)
}

void VertexType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VertexType_gie_5fschema_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&property_partition_strategy_) -
      reinterpret_cast<char*>(&id_)) + sizeof(property_partition_strategy_));
}

VertexType::~VertexType() {
  // @@protoc_insertion_point(destructor:gie.VertexType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VertexType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VertexType::ArenaDtor(void* object) {
  VertexType* _this = reinterpret_cast< VertexType* >(object);
  (void)_this;
}
void VertexType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VertexType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VertexType& VertexType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VertexType_gie_5fschema_2eproto.base);
  return *internal_default_instance();
}


void VertexType::Clear() {
// @@protoc_insertion_point(message_clear_start:gie.VertexType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  primary_keys_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&property_partition_strategy_) -
      reinterpret_cast<char*>(&id_)) + sizeof(property_partition_strategy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VertexType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gie.VertexType.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gie.Property properties = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string primary_keys = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_primary_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gie.VertexType.primary_keys"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .gie.VertexPartitionStrategy partition_strategy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_partition_strategy(static_cast<::gie::VertexPartitionStrategy>(val));
        } else goto handle_unusual;
        continue;
      // .gie.PropertyPartitionStrategy property_partition_strategy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_property_partition_strategy(static_cast<::gie::PropertyPartitionStrategy>(val));
        } else goto handle_unusual;
        continue;
      // int64 total_num = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          total_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VertexType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gie.VertexType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gie.VertexType.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .gie.Property properties = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_properties(i), target, stream);
  }

  // repeated string primary_keys = 4;
  for (int i = 0, n = this->_internal_primary_keys_size(); i < n; i++) {
    const auto& s = this->_internal_primary_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gie.VertexType.primary_keys");
    target = stream->WriteString(4, s, target);
  }

  // .gie.VertexPartitionStrategy partition_strategy = 5;
  if (this->partition_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_partition_strategy(), target);
  }

  // .gie.PropertyPartitionStrategy property_partition_strategy = 6;
  if (this->property_partition_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_property_partition_strategy(), target);
  }

  // int64 total_num = 7;
  if (this->total_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_total_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gie.VertexType)
  return target;
}

size_t VertexType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gie.VertexType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gie.Property properties = 3;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string primary_keys = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(primary_keys_.size());
  for (int i = 0, n = primary_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      primary_keys_.Get(i));
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // .gie.VertexPartitionStrategy partition_strategy = 5;
  if (this->partition_strategy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_partition_strategy());
  }

  // int64 total_num = 7;
  if (this->total_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_num());
  }

  // .gie.PropertyPartitionStrategy property_partition_strategy = 6;
  if (this->property_partition_strategy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_property_partition_strategy());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VertexType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gie.VertexType)
  GOOGLE_DCHECK_NE(&from, this);
  const VertexType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VertexType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gie.VertexType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gie.VertexType)
    MergeFrom(*source);
  }
}

void VertexType::MergeFrom(const VertexType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gie.VertexType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  primary_keys_.MergeFrom(from.primary_keys_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.partition_strategy() != 0) {
    _internal_set_partition_strategy(from._internal_partition_strategy());
  }
  if (from.total_num() != 0) {
    _internal_set_total_num(from._internal_total_num());
  }
  if (from.property_partition_strategy() != 0) {
    _internal_set_property_partition_strategy(from._internal_property_partition_strategy());
  }
}

void VertexType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gie.VertexType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VertexType::CopyFrom(const VertexType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gie.VertexType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VertexType::IsInitialized() const {
  return true;
}

void VertexType::InternalSwap(VertexType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  properties_.InternalSwap(&other->properties_);
  primary_keys_.InternalSwap(&other->primary_keys_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VertexType, property_partition_strategy_)
      + sizeof(VertexType::property_partition_strategy_)
      - PROTOBUF_FIELD_OFFSET(VertexType, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VertexType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EdgeType::InitAsDefaultInstance() {
}
class EdgeType::_Internal {
 public:
};

EdgeType::EdgeType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  properties_(arena),
  primary_keys_(arena),
  src_dst_pairs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gie.EdgeType)
}
EdgeType::EdgeType(const EdgeType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      properties_(from.properties_),
      primary_keys_(from.primary_keys_),
      src_dst_pairs_(from.src_dst_pairs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&total_num_, &from.total_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&total_num_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:gie.EdgeType)
}

void EdgeType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EdgeType_gie_5fschema_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&total_num_)) + sizeof(id_));
}

EdgeType::~EdgeType() {
  // @@protoc_insertion_point(destructor:gie.EdgeType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EdgeType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EdgeType::ArenaDtor(void* object) {
  EdgeType* _this = reinterpret_cast< EdgeType* >(object);
  (void)_this;
}
void EdgeType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EdgeType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EdgeType& EdgeType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EdgeType_gie_5fschema_2eproto.base);
  return *internal_default_instance();
}


void EdgeType::Clear() {
// @@protoc_insertion_point(message_clear_start:gie.EdgeType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  primary_keys_.Clear();
  src_dst_pairs_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&total_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&total_num_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdgeType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gie.EdgeType.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gie.Property properties = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string primary_keys = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_primary_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gie.EdgeType.primary_keys"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gie.SrcDstPair src_dst_pairs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_src_dst_pairs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 total_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          total_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EdgeType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gie.EdgeType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gie.EdgeType.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .gie.Property properties = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_properties(i), target, stream);
  }

  // repeated string primary_keys = 4;
  for (int i = 0, n = this->_internal_primary_keys_size(); i < n; i++) {
    const auto& s = this->_internal_primary_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gie.EdgeType.primary_keys");
    target = stream->WriteString(4, s, target);
  }

  // repeated .gie.SrcDstPair src_dst_pairs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_src_dst_pairs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_src_dst_pairs(i), target, stream);
  }

  // int64 total_num = 6;
  if (this->total_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_total_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gie.EdgeType)
  return target;
}

size_t EdgeType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gie.EdgeType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gie.Property properties = 3;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string primary_keys = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(primary_keys_.size());
  for (int i = 0, n = primary_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      primary_keys_.Get(i));
  }

  // repeated .gie.SrcDstPair src_dst_pairs = 5;
  total_size += 1UL * this->_internal_src_dst_pairs_size();
  for (const auto& msg : this->src_dst_pairs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 total_num = 6;
  if (this->total_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_num());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EdgeType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gie.EdgeType)
  GOOGLE_DCHECK_NE(&from, this);
  const EdgeType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EdgeType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gie.EdgeType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gie.EdgeType)
    MergeFrom(*source);
  }
}

void EdgeType::MergeFrom(const EdgeType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gie.EdgeType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  primary_keys_.MergeFrom(from.primary_keys_);
  src_dst_pairs_.MergeFrom(from.src_dst_pairs_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.total_num() != 0) {
    _internal_set_total_num(from._internal_total_num());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void EdgeType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gie.EdgeType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgeType::CopyFrom(const EdgeType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gie.EdgeType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeType::IsInitialized() const {
  return true;
}

void EdgeType::InternalSwap(EdgeType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  properties_.InternalSwap(&other->properties_);
  primary_keys_.InternalSwap(&other->primary_keys_);
  src_dst_pairs_.InternalSwap(&other->src_dst_pairs_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EdgeType, id_)
      + sizeof(EdgeType::id_)
      - PROTOBUF_FIELD_OFFSET(EdgeType, total_num_)>(
          reinterpret_cast<char*>(&total_num_),
          reinterpret_cast<char*>(&other->total_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgeType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Statistics::InitAsDefaultInstance() {
}
class Statistics::_Internal {
 public:
};

Statistics::Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gie.Statistics)
}
Statistics::Statistics(const Statistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_vertices_, &from.num_vertices_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_partitions_) -
    reinterpret_cast<char*>(&num_vertices_)) + sizeof(num_partitions_));
  // @@protoc_insertion_point(copy_constructor:gie.Statistics)
}

void Statistics::SharedCtor() {
  ::memset(&num_vertices_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_partitions_) -
      reinterpret_cast<char*>(&num_vertices_)) + sizeof(num_partitions_));
}

Statistics::~Statistics() {
  // @@protoc_insertion_point(destructor:gie.Statistics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Statistics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Statistics::ArenaDtor(void* object) {
  Statistics* _this = reinterpret_cast< Statistics* >(object);
  (void)_this;
}
void Statistics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Statistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Statistics& Statistics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Statistics_gie_5fschema_2eproto.base);
  return *internal_default_instance();
}


void Statistics::Clear() {
// @@protoc_insertion_point(message_clear_start:gie.Statistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_vertices_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_partitions_) -
      reinterpret_cast<char*>(&num_vertices_)) + sizeof(num_partitions_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Statistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 num_partitions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_partitions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 num_vertices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_vertices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 num_edges = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_edges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Statistics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gie.Statistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_partitions = 1;
  if (this->num_partitions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_partitions(), target);
  }

  // uint64 num_vertices = 2;
  if (this->num_vertices() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_num_vertices(), target);
  }

  // uint64 num_edges = 3;
  if (this->num_edges() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_num_edges(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gie.Statistics)
  return target;
}

size_t Statistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gie.Statistics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 num_vertices = 2;
  if (this->num_vertices() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_vertices());
  }

  // uint64 num_edges = 3;
  if (this->num_edges() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_edges());
  }

  // uint32 num_partitions = 1;
  if (this->num_partitions() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_partitions());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Statistics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gie.Statistics)
  GOOGLE_DCHECK_NE(&from, this);
  const Statistics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Statistics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gie.Statistics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gie.Statistics)
    MergeFrom(*source);
  }
}

void Statistics::MergeFrom(const Statistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gie.Statistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_vertices() != 0) {
    _internal_set_num_vertices(from._internal_num_vertices());
  }
  if (from.num_edges() != 0) {
    _internal_set_num_edges(from._internal_num_edges());
  }
  if (from.num_partitions() != 0) {
    _internal_set_num_partitions(from._internal_num_partitions());
  }
}

void Statistics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gie.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Statistics::CopyFrom(const Statistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gie.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statistics::IsInitialized() const {
  return true;
}

void Statistics::InternalSwap(Statistics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Statistics, num_partitions_)
      + sizeof(Statistics::num_partitions_)
      - PROTOBUF_FIELD_OFFSET(Statistics, num_vertices_)>(
          reinterpret_cast<char*>(&num_vertices_),
          reinterpret_cast<char*>(&other->num_vertices_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Statistics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Schema::InitAsDefaultInstance() {
  ::gie::_Schema_default_instance_._instance.get_mutable()->partition_strategy_ = const_cast< ::gie::GraphPartitionStrategy*>(
      ::gie::GraphPartitionStrategy::internal_default_instance());
  ::gie::_Schema_default_instance_._instance.get_mutable()->statistics_ = const_cast< ::gie::Statistics*>(
      ::gie::Statistics::internal_default_instance());
}
class Schema::_Internal {
 public:
  static const ::gie::GraphPartitionStrategy& partition_strategy(const Schema* msg);
  static const ::gie::Statistics& statistics(const Schema* msg);
};

const ::gie::GraphPartitionStrategy&
Schema::_Internal::partition_strategy(const Schema* msg) {
  return *msg->partition_strategy_;
}
const ::gie::Statistics&
Schema::_Internal::statistics(const Schema* msg) {
  return *msg->statistics_;
}
Schema::Schema(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vertex_types_(arena),
  edge_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gie.Schema)
}
Schema::Schema(const Schema& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vertex_types_(from.vertex_types_),
      edge_types_(from.edge_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_partition_strategy()) {
    partition_strategy_ = new ::gie::GraphPartitionStrategy(*from.partition_strategy_);
  } else {
    partition_strategy_ = nullptr;
  }
  if (from._internal_has_statistics()) {
    statistics_ = new ::gie::Statistics(*from.statistics_);
  } else {
    statistics_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gie.Schema)
}

void Schema::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Schema_gie_5fschema_2eproto.base);
  ::memset(&partition_strategy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statistics_) -
      reinterpret_cast<char*>(&partition_strategy_)) + sizeof(statistics_));
}

Schema::~Schema() {
  // @@protoc_insertion_point(destructor:gie.Schema)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Schema::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete partition_strategy_;
  if (this != internal_default_instance()) delete statistics_;
}

void Schema::ArenaDtor(void* object) {
  Schema* _this = reinterpret_cast< Schema* >(object);
  (void)_this;
}
void Schema::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Schema::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Schema& Schema::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Schema_gie_5fschema_2eproto.base);
  return *internal_default_instance();
}


void Schema::Clear() {
// @@protoc_insertion_point(message_clear_start:gie.Schema)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertex_types_.Clear();
  edge_types_.Clear();
  if (GetArena() == nullptr && partition_strategy_ != nullptr) {
    delete partition_strategy_;
  }
  partition_strategy_ = nullptr;
  if (GetArena() == nullptr && statistics_ != nullptr) {
    delete statistics_;
  }
  statistics_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Schema::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gie.GraphPartitionStrategy partition_strategy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_partition_strategy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gie.VertexType vertex_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertex_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gie.EdgeType edge_types = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edge_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .gie.Statistics statistics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_statistics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Schema::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gie.Schema)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gie.GraphPartitionStrategy partition_strategy = 1;
  if (this->has_partition_strategy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::partition_strategy(this), target, stream);
  }

  // repeated .gie.VertexType vertex_types = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertex_types_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_vertex_types(i), target, stream);
  }

  // repeated .gie.EdgeType edge_types = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edge_types_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_edge_types(i), target, stream);
  }

  // .gie.Statistics statistics = 4;
  if (this->has_statistics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::statistics(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gie.Schema)
  return target;
}

size_t Schema::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gie.Schema)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gie.VertexType vertex_types = 2;
  total_size += 1UL * this->_internal_vertex_types_size();
  for (const auto& msg : this->vertex_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gie.EdgeType edge_types = 3;
  total_size += 1UL * this->_internal_edge_types_size();
  for (const auto& msg : this->edge_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .gie.GraphPartitionStrategy partition_strategy = 1;
  if (this->has_partition_strategy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *partition_strategy_);
  }

  // .gie.Statistics statistics = 4;
  if (this->has_statistics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statistics_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Schema::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gie.Schema)
  GOOGLE_DCHECK_NE(&from, this);
  const Schema* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Schema>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gie.Schema)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gie.Schema)
    MergeFrom(*source);
  }
}

void Schema::MergeFrom(const Schema& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gie.Schema)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertex_types_.MergeFrom(from.vertex_types_);
  edge_types_.MergeFrom(from.edge_types_);
  if (from.has_partition_strategy()) {
    _internal_mutable_partition_strategy()->::gie::GraphPartitionStrategy::MergeFrom(from._internal_partition_strategy());
  }
  if (from.has_statistics()) {
    _internal_mutable_statistics()->::gie::Statistics::MergeFrom(from._internal_statistics());
  }
}

void Schema::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gie.Schema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Schema::CopyFrom(const Schema& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gie.Schema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Schema::IsInitialized() const {
  return true;
}

void Schema::InternalSwap(Schema* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vertex_types_.InternalSwap(&other->vertex_types_);
  edge_types_.InternalSwap(&other->edge_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Schema, statistics_)
      + sizeof(Schema::statistics_)
      - PROTOBUF_FIELD_OFFSET(Schema, partition_strategy_)>(
          reinterpret_cast<char*>(&partition_strategy_),
          reinterpret_cast<char*>(&other->partition_strategy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Schema::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gie
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gie::PropertyPartitionByEntityStrategy* Arena::CreateMaybeMessage< ::gie::PropertyPartitionByEntityStrategy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gie::PropertyPartitionByEntityStrategy >(arena);
}
template<> PROTOBUF_NOINLINE ::gie::PropertyPartitionByTypeStrategy* Arena::CreateMaybeMessage< ::gie::PropertyPartitionByTypeStrategy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gie::PropertyPartitionByTypeStrategy >(arena);
}
template<> PROTOBUF_NOINLINE ::gie::GraphPropertyPartitionStrategy* Arena::CreateMaybeMessage< ::gie::GraphPropertyPartitionStrategy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gie::GraphPropertyPartitionStrategy >(arena);
}
template<> PROTOBUF_NOINLINE ::gie::GraphPartitionStrategy* Arena::CreateMaybeMessage< ::gie::GraphPartitionStrategy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gie::GraphPartitionStrategy >(arena);
}
template<> PROTOBUF_NOINLINE ::gie::SrcDstPair* Arena::CreateMaybeMessage< ::gie::SrcDstPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gie::SrcDstPair >(arena);
}
template<> PROTOBUF_NOINLINE ::gie::Property* Arena::CreateMaybeMessage< ::gie::Property >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gie::Property >(arena);
}
template<> PROTOBUF_NOINLINE ::gie::VertexType* Arena::CreateMaybeMessage< ::gie::VertexType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gie::VertexType >(arena);
}
template<> PROTOBUF_NOINLINE ::gie::EdgeType* Arena::CreateMaybeMessage< ::gie::EdgeType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gie::EdgeType >(arena);
}
template<> PROTOBUF_NOINLINE ::gie::Statistics* Arena::CreateMaybeMessage< ::gie::Statistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gie::Statistics >(arena);
}
template<> PROTOBUF_NOINLINE ::gie::Schema* Arena::CreateMaybeMessage< ::gie::Schema >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gie::Schema >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
